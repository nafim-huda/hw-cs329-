from emora_stdm import KnowledgeBase, DialogueFlow
from enum import Enum, auto
from emora_stdm import Macro
from nltk.stem import WordNetLemmatizer
from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer

class VERSION(Macro):

    def run(self, ngrams, vars, args):
        if 'time_type' in vars:
            m = vars['time_type']
        sentences = [m]
        analyzer = SentimentIntensityAnalyzer()
        for sentence in sentences:
            vs = analyzer.polarity_scores(sentence)
            print("{:-<65} {}".format(sentence, str(vs)))
class State(Enum):
    START = 0
    PROMPT = 1
    ERR = 2
    END = 3
    EXIT = auto()
    PROMPT2 = 4
    Ending = auto()
    # These are for the first response
    First_feeling_positive = auto()
    First_feeling_negative = auto()
    Catch_feeling_positive = auto()
    Catch_feeling_negative = auto()
    First_feeling_good = auto()

    # Positivity Tree
    First_positive_prompt = auto()

    # Negative Tree
    First_negative_prompt = auto()
    First_negative_response = auto()
    U2A = auto()
    U2B = auto()

    # 3rd
    P3 = auto()
    P3B = auto()
    U3A = auto()
    ERR2 = auto()

    ###ANGER STATES###
    ANGER1 = auto()
    ANGER2 = auto()
    QUESTION1 = auto()
    QUESTION2 = auto()
    PERSON = auto()
    ACTIVITY = auto()
    INEVITABLE = auto()
    AVOIDABLE = auto()
    IDENTIFYPERSON = auto()
    IDENTIFYACTIVITY = auto()
    INEVDESCRIP = auto()
    AVOIDDESCRIP = auto()
    TRIED = auto()
    NOTTRIED = auto()
    FRIEND = auto()
    FAMILY = auto()
    INEVITABLERESPYES = auto()
    INEVITABLERESPNO = auto()
    AVOIDABLERESPCONTROL = auto()
    AVOIDABLERESPINABILITY = auto()
    CHECKIN = auto()
    CHECKIN1 = auto()
    CHECKIN2 = auto()
    CHECKIN3 = auto()
    CHECKIN4 = auto()
    CHECKIN5 = auto()
    CHECKIN6 = auto()
    CHECKIN7 = auto()
    CHECKINRESP = auto()
    CHECKINRESP1 = auto()
    CHECKINRESP2 = auto()
    CHECKINRESP3 = auto()
    CHECKINRESP4 = auto()
    CHECKINRESP5 = auto()
    CHECKINRESP6 = auto()
    CHECKINRESP7 = auto()
    TRIEDINTERMISSION = auto()
    NOTTRIEDINTERMISSION = auto()
    FRIENDINTERMISSION = auto()
    FAMILYINTERMISSION = auto()
    INEVITABLEINTERMISSION = auto()
    NOTINEVITABLEINTERMISSION = auto()
    CONTROLINTERMISSION = auto()
    NOTCONTROLINTERMISSION = auto()
    ERRANG = auto()
    ERRANG1 = auto()
    ERRANG2 = auto()
    ERRANG3 = auto()
    ERRANG4 = auto()
    ERRANG5 = auto()

    # DEPRESSION
    P4CD = auto()
    P4C = auto()
    P4C1 = auto()
    U4C1 = auto()
    U4C2 = auto()
    U4C3 = auto()
    U4C4 = auto()
    U4C5 = auto()
    P4C1A = auto()
    P4C1Asecond = auto()
    P4C2B = auto()
    P4C3C = auto()
    P4C4D = auto()
    P4C4E = auto()
    U4C4E1 = auto()
    U4C4D2 = auto()
    U4C4D1 = auto()
    U4C4D1A1 = auto()
    P4C4D2A = auto()
    P4C4D1A = auto()
    P4C4E1A = auto()
    P4C2B1A = auto()
    P4C2B2A = auto()
    U4C4E1A1 = auto()
    U4C4D1A2 = auto()
    U4C4E1A2 = auto()
    P4C4E1A1A = auto()
    U4C4E1A1A = auto()
    U4C4E1A1B = auto()
    U4C4D2A1 = auto()
    U4C2B1 = auto()
    U4C2B2 = auto()
    U4C2B3 = auto()
    U4C2B4 = auto()
    P4C2B4A = auto()
    U4C2B2A3 = auto()
    U4C2B2A2 = auto()
    U4C2B2A1 = auto()
    U4C2B1A2 = auto()
    U4C2B1A1 = auto()
    P4C2B1A1A = auto()
    P4C4E1A2A = auto()
    U4C4E1A2A1 = auto()
    U4C4E1A2A2 = auto()
    P4C2B2A3A = auto()
    P4C4D1A1A = auto()
    P4C2B2A1A = auto()
    P4C2B1A2A = auto()
    U4C2B1A1A1 = auto()
    P4C2B1A1A1A = auto()
    U4C2B1A1A1A1 = auto()
    U4C2B1A1A1A2 = auto()
    U4C2B2A1A1 = auto()
    U4C4D1A1A1 = auto()
    P4C4D1A2A = auto()
    U4C4D1A2A2 = auto()
    U4C4D1A2A1 = auto()
    U4C2B1A2A1 = auto()
    U4C2B1A2A2 = auto()
    P4C2B1A2A1A = auto()
    U4C2B1A2A1A1 = auto()
    U4C2B1A2A1A2 = auto()
    P4C4D1A1A1A = auto()
    P4C2B1A2A2A = auto()
    P4C2B2A1A1A = auto()
    U4C4D1A1A1A1 = auto()
    U4C2B2A1A1A2 = auto()
    U4C2B2A1A1A1 = auto()
    U4C2B1A2A2A1 = auto()
    P4C2B2A1A1A1A = auto()
    U4C2B2A1A1A1A1 = auto()
    U4C2B2A1A1A1A2 = auto()
    U4C2B2A1A1A2A1 = auto()
    P4C2B2A1A1A2A = auto()
    U4C2B2A1A1A2A2 = auto()
    P4C4D1A1A1A1A = auto()
    P4CE = auto()
    P4CERR = auto()
    P4CERR2 = auto()
    P4CERR3 = auto()
    P4CERR4 = auto()
    P4CERR5 = auto()
    P4CERR6 = auto()
    P4CERR7 = auto()
    P4CERR8 = auto()
    P4CERR9 = auto()
    P4CERR10 = auto()
    P4CERR11 = auto()
    P4CERR12 = auto()
    P4CERR13 = auto()
    P4CERR14 = auto()
    P4CERR15 = auto()
    P4CERR16 = auto()
    P4CERR17 = auto()
    P4CERR18 = auto()
    P4CERR19 = auto()
    P4CERR20 = auto()
    P4CERR21 = auto()
    A11 = auto()
    A111 = auto()
    A1111 = auto()

    P4D = auto()
    U4D1 = auto()
    P4D1 = auto()

    # eating
    P4E = auto()
    U4E1 = auto()
    U4E2 = auto()
    P4E1A = auto()
    P4E2A = auto()
    U4E1A2 = auto()
    U4E1A1 = auto()
    U4E2A1 = auto()
    U4E2A2 = auto()
    P4E1A2A = auto()
    P4E1A2B = auto()
    P4E2A1A = auto()
    P4E2A2A = auto()
    U4E1A2B1 = auto()
    U4E2A1A1 = auto()
    U4E2A1A2 = auto()
    U4E2A2A1 = auto()
    U4E2A2A2 = auto()
    U4E2A2A1A1 = auto()
    P4E2A2A1A = auto()
    P4E2A2A2A = auto()
    U4EA = auto()
    P4EERR = auto()
    P4E1AERR = auto()
    P4E1A2AERR = auto()
    P4E1A2BERR = auto()
    P4E2AERR = auto()
    P4E2A1AERR = auto()
    P4E2A2AERR = auto()
    P4E2A2A2AERR = auto()
    S1 = auto()
    S2 = auto()
    S3 = auto()
    S4 = auto()
    S5 = auto()
    S6 = auto()
    S7 = auto()
    S8 = auto()
    S9 = auto()
    S10 = auto()
    S11 = auto()
    S12 = auto()
    S13 = auto()
    S14 = auto()
    S15 = auto()
    S16 = auto()
    S17 = auto()
    S18 = auto()
    S19 = auto()
    S20 = auto()
    S21 = auto()
    S22 = auto()
    S23 = auto()
    S24 = auto()
    S25 = auto()
    S26 = auto()
    S27 = auto()
    S28 = auto()
    S29 = auto()
    S30 = auto()
    S31 = auto()
    S32 = auto()
    S33 = auto()
    S34 = auto()
    S35 = auto()
    S36 = auto()
    S37 = auto()
    S38 = auto()
    S39 = auto()
    S40 = auto()
    S41 = auto()
    S42 = auto()
    S43 = auto()
    S44 = auto()
    S45 = auto()
    S46 = auto()
    S47 = auto()
    S48 = auto()
    S49 = auto()
    S50 = auto()
    S51 = auto()
    S52 = auto()
    S53 = auto()
    S54 = auto()
    S55 = auto()
    S56 = auto()
    S57 = auto()
    S58 = auto()
    S59 = auto()
    S60 = auto()
    S61 = auto()
    S62 = auto()
    S63 = auto()
    S64 = auto()
    S65 = auto()
    S66 = auto()
    S67 = auto()
    S68 = auto()
    S69 = auto()
    S70 = auto()
    S71 = auto()
    S72 = auto()
    S73 = auto()
    S74 = auto()
    S75 = auto()
    S76 = auto()
    S77 = auto()
    S78 = auto()
    S79 = auto()
    S80 = auto()
    S81 = auto()
    S82 = auto()
    S83 = auto()
    S84 = auto()
    S85 = auto()
    S86 = auto()
    S87 = auto()
    S88 = auto()
    S89 = auto()
    S90 = auto()
    S91 = auto()
    S92 = auto()
    S93 = auto()
    S94 = auto()
    S95 = auto()
    S96 = auto()
    S97 = auto()
    S98 = auto()
    S99 = auto()
    S100 = auto()

    U1 = auto()
    U2 = auto()
    U3 = auto()
    U4 = auto()
    U5 = auto()
    U6 = auto()
    U7 = auto()
    U8 = auto()
    U9 = auto()
    U10 = auto()
    U11 = auto()
    U12 = auto()
    U13 = auto()
    U14 = auto()
    U15 = auto()
    U16 = auto()
    U17 = auto()
    U18 = auto()
    U19 = auto()
    U20 = auto()
    U21 = auto()
    U22 = auto()
    U23 = auto()
    U24 = auto()
    U25 = auto()
    U26 = auto()
    U27 = auto()
    U28 = auto()
    U29 = auto()
    U30 = auto()
    U31 = auto()
    U32 = auto()
    U33 = auto()
    U34 = auto()
    U35 = auto()
    U36 = auto()
    U37 = auto()
    U38 = auto()
    U39 = auto()
    U40 = auto()
    U41 = auto()
    U42 = auto()
    U43 = auto()
    U44 = auto()
    U45 = auto()
    U46 = auto()
    U47 = auto()
    U48 = auto()
    U49 = auto()
    U50 = auto()
    U51 = auto()
    U52 = auto()
    U53 = auto()
    U54 = auto()
    U55 = auto()
    U56 = auto()
    U57 = auto()
    U58 = auto()
    U59 = auto()
    U60 = auto()
    U61 = auto()
    U62 = auto()
    U63 = auto()
    U64 = auto()
    U65 = auto()
    U66 = auto()
    U67 = auto()
    U68 = auto()
    U69 = auto()
    U70 = auto()
    U71 = auto()
    U72 = auto()
    U73 = auto()
    U74 = auto()
    U75 = auto()
    U76 = auto()
    U77 = auto()
    U78 = auto()
    U79 = auto()
    U80 = auto()
    U81 = auto()
    U82 = auto()
    U83 = auto()
    U84 = auto()
    U85 = auto()
    U86 = auto()
    U87 = auto()
    U88 = auto()
    U89 = auto()
    U90 = auto()
    U91 = auto()
    U92 = auto()
    U93 = auto()
    U94 = auto()
    U95 = auto()
    U96 = auto()
    U97 = auto()
    U98 = auto()
    U99 = auto()
    U100 = auto()

    name = auto()
    name_prompt = auto()
    name_answer = auto()
    name_reponse = auto()

    First_positive_answer = auto()
    First_positive_end = auto()
    First_positive_reply = auto()
    First_positive_ending = auto()
    First_positive_alone = auto()
    First_positive_end2 = auto()
    First_positive_ending2 = auto()

    # Yuewu Zhou ######################################################################################################
    # confrontation branch ###################################################################

    # Confrontation prompt
    confrontation_prompt = auto()
    # A: We had an argument/fight
    confrontation_answer = auto()

    # - How did it start?
    confrontation_cause_prompt = auto()

    # - A: Other person / self / don't know (don't know leads to improvement branch)
    confrontation_cause_answer = auto()
    confrontation_cause_self = auto()
    confrontation_cause_other = auto()
    confrontation_cause_dontknow = auto()
    confrontation_cause_error = auto()

    # -- Do you think it was intentional?
    confrontation_intentional_yn = auto()

    # -- Yes / No
    confrontation_intentional_answer = auto()

    # --- Why do you think they said that?
    confrontation_intentional_motive_prompt = auto()

    # --- A: Positive / negative sentiment
    confrontation_intentional_motive_answer = auto()

    # ---- Is it justified to argue because (reason) ?
    confrontation_intentional_motive_yn = auto()

    # ---- TO DO: Handle positive vs negative answers

    # -- Is this something that usually happens?
    confrontation_usual_prompt = auto()

    # -- A: Yes / No (Yes leads to advice branch)
    confrontation_usual_yn = auto()

    # --- When was the last time this has happened?
    confrontation_usual_when = auto()

    # --- A: time
    confrontation_usual_when_answer = auto()

    # ---- Have you met with (pronoun) since (time) where you haven't had a (confrontation)?
    confrontation_usual_when_yn = auto()

    confrontation_usual_when1 = auto()
    confrontation_usual_when2 = auto()
    confrontation_usual_when3 = auto()
    confrontation_usual_when_answer1 = auto()
    confrontation_usual_when_answer2 = auto()
    confrontation_usual_when_answer3 = auto()

    # caught self & other branch ###################################################################
    # A: I (catch verb)
    confrontation_self_answer = auto()

    # - How do you think that made them feel?
    confrontation_self_feel_prompt = auto()

    # - A: good / bad
    confrontation_self_feel_answer = auto()

    # -- What do you think could have gone better?
    confrontation_self_improvement_prompt = auto()

    # -- A: verbs (could have) / I don't know or nothing
    confrontation_self_improvement_answer = auto()

    # --- That's sounds great! / Interesting. / I think that would work! Anything else?
    confrontation_self_improvement_yn = auto()

    # --- A: Yes / No (yes returns to confrontation_self_improvement_yn, no transitions to advice)
    confrontation_self_improvement_yn_answer = auto()

    # A: He/She/They (catch verb)
    confrontation_other_answer = auto()

    # - Why do you think they (caught verb) (transitions to intentionality in argument branch)
    confrontation_other_why_prompt = auto()

    # no catch branch ###################################################################
    # A: (no catch)
    confrontation_noCatch_answer = auto()

    # - Was it something that you did?
    confrontation_noCatch_self_prompt = auto()

    # - A: Yes / No (yes leads to self branch)
    confrontation_noCatch_self_answer = auto()

    # -- Was it something that someone else did?
    confrontation_noCatch_other_prompt = auto()

    # -- A: Yes / No (yes leads to other branch branch)
    confrontation_noCatch_other_answer = auto()

    # advice branch ###################################################################
    # Could I offer you some advice?
    confrontation_advice_yn = auto()

    # A: Yes / No (no ends the conversation)
    confrontation_advice_yn_answer = auto()

    # - Would a calmer attitude have helped the situation?
    confrontation_advice_calmer_yn = auto()

    # - A: Yes / No / Maybe (no transitions to other treatment)
    confrontation_advice_calmer_answer = auto()

    # -- Here are some techniques to calm yourself down
    # TO DO: offer advice to calm down

    # usual branch ###################################################################
    # Why do you spend time with this person?
    confrontation_exposure_prompt = auto()

    # because ...
    confrontation_exposure_answer = auto()

    # Will you keep spending time with them?
    confrontation_exposure_why = auto()

    # Yes / No
    confrontation_exposure_yn = auto()

    # Is it maybe a good idea to spend some time away from them and cool off?
    confrontation_exposure_end = auto()

    # treatment branch ###################################################################
    # Still researching treatments, placeholder for advice
    confrontation_treatment_placeholder = auto()

    # Relaxed breathing recommendation
    confrontation_treatment_relaxedbreathing = auto()
    confrontation_treatment_relaxedbreathing_response = auto()
    confrontation_treatment_relaxedbreathing2 = auto()
    confrontation_treatment_relaxedbreathing_response2 = auto()

    # Journaling
    confrontation_treatment_journaling = auto()
    confrontation_treatment_journaling_response = auto()
    confrontation_treatment_journaling2 = auto()
    confrontation_treatment_journaling_response2 = auto()
    # END
    ENDwGREET = auto()
    Incomprehensible_Exit = auto()

    ############# END Confrontation #####################

    corona_prompt = auto()
    corona_prompt1 = auto()

    school_prompt = auto()
    club_prompt = auto()
    club_answer = auto()
    club_enjoy = auto()
    club_enjoy_y = auto()
    club_enjoy_n = auto()
    club_in_club = auto()
    club_in_club_answer = auto()
    club_tell_more_answer = auto()
    club_tell_more = auto()

    # family branch

    family_prompt = auto()
    family_answer = auto()
    family_self = auto()
    family_talk = auto()
    family_talk_answer = auto()
    family_talk_end = auto()
    family_talk_suggestion = auto()
    family_self_pressure = auto()
    family_self_pressure_y = auto()
    family_self_pressure_college = auto()
    family_self_pressure_job = auto()
    family_self_pressure_job_answer = auto()
    family_distortion =auto()

    # work states
    work_prompt = auto()
    work_answer = auto()
    work_enjoy = auto()
    work_enjoy_yn = auto()
    work_enjoy_y = auto()
    work_enjoy_n = auto()
    work_stress_y = auto()
    work_stress_not = auto()

    # affected
    corona_located = auto()
    corona_affected = auto()
    corona_affected_response = auto()
    corona_unknown = auto()
    corona_unknown_response = auto()
    corona_not_us = auto()

    # extension
    corona_activity = auto()
    corona_activity_response = auto()
    corona_activity_response_else = auto()
    corona_not_regularly = auto()
    corona_not_regularly_response = auto()
    corona_not_regularly_help = auto()
    corona_not_regularly_help_response = auto()
    corona_unable_to_advance = auto()
    corona_activity_okay = auto()

    # cognitive distortions
    distortion_intro = auto()
    distortion = auto()
    filtering = auto()
    filtering_ans = auto()
    filtering_yes = auto()
    filtering_no = auto()
    filtering_unsure = auto()
    filtering_treatment = auto()
    filtering_journal_entry = auto()
    polar_intro = auto()
    polar = auto()
    polar_ans = auto()
    polar_yes = auto()
    polar_no = auto()
    polar_unsure = auto()
    polar_treatment = auto()

    want_change = auto()
    no_want_change = auto()
    change = auto()
    change_response = auto()
    change_yes = auto()


    #new topic
    change_topic = auto()
    start_topic = auto()
    next_topic = auto()
    change_focus = auto()

    #focus
    change_focus_yes = auto()
    changed_focus = auto()
    more_journal = auto()

    # ending
    goodbye_statement = auto()
    end = auto()


# TODO: create the ontology as needed
ontology = {
    "ontology": {
        "ontP4C":
            [
                "ontschool",
                "onttired",
                "ontfunclub",
                "ontbadclub",
                "ontsad",
                "ontfamily",
                "ontdunno",
                "ontclubs",
                "ontwork",
                "ontunsure",
                "onthotline",
                "onteating",
                "onteatingtoolittle",
                "onteatingtoomuch",
                "ontangry",
                "ontnewyork",
                "ontnewjersey",
                "ontcalifornia",
                "ontmichigan",
                "ontbadstate",
                "ontokaystate",
                "ontgeorgia",
                "ontcorona",
                "ontstillbusy",
                "ontgoodactivities",
                "ontbadactivities",
                "ontwasteoftime",
                "ontlostjob",
                "ontuserquestion"
            ],
        "ontuserquestion":
            [
                "what should",
                "how should",
                "what do",
                "?",
                "advice"
            ],
        "ontlostjob":
            [
                "lost my job",
                "lost job",
                "unemployed",
                "fired",
                "laid off",
                "layoff",
                "layed off"
            ],
        "ontgeorgia":
            [
                "georgia",
                "ga"
            ],
        "ontstillbusy":
            [
                "still busy",
                "lots of work",
                "stressed",
                "too much work",
                "busy",
                "work"
            ],
        "ontgoodactivities":
            [
                "cook",
                "cooking",
                "cycling",
                "swimming",
                "weightlifting",
                "knitting",
                "draw",
                "drew",
                "drawing",
                "knit",
                "knitted",
                "baking",
                "bakes",
                "made",
                "making",
                "homework",
                "school",
                "schoolwork",
                "family",
                "mom",
                "dad",
                "mother",
                "father",
                "sister",
                "brother",
                "sibling",
                "siblings",
                "creating",
                "create",
                "created",
                "hobby",
                "exploring",
                "explore",
                "explored",
                "reading",
                "book",
                "books",
                "read",
                "growing",
                "grow",
                "grew",
                "building",
                "build",
                "built",
                "yoga",
                "job",
                "organizing",
                "cleaning",
                "organize",
                "organized",
                "clean",
                "cleaned"
                "staying home",
                "social distancing",
                "social distance",
                "quarantine",
                "journaling",
                "scrapbooking",
                "journal",
                "scrapbook",
                "singing",
                "violin",
                "piano",
                "practice",
                "practicing",
                "write",
                "writing",
                "guitar",
                "camera",
                "photography",
                "photos",
                "photographs",
                "editing",
                "dancing",
                "singing",
                "sing",
                "dance",
                "exercising",
                "exercise",
                "running",
                "pilates",
                "run",
                "stretching",
                "stretch",
                "jog",
                "jogging",
                "blogilates",
                "recipes",
                "recipe",
                "novels",
                "novel",
                "start",
                "starting",
                "started"
            ],
        "ontbadactivities":
            [
                "stressing",
                "worrying",
                "money",
                "financial",
                "finances",
                "lost my job",
                "lost job",
                "unemployed,",
                "crying",
                "cry",
                "cried",
                "drinking",
                "sad",
                "depressed",
                "depression",
                "shock",
                "shocked",
                "news",
                "unmotivated",
                "checking",
                "refreshing",
                "videogames",
                "video games",
                "gaming",
                "games"
            ],
        "ontwasteoftime":
            [
                "animalcrossings",
                "animal crossings",
                "animal crossing",
                "animalcrossing",
                "netflix",
                "movies",
                "tv",
                "television",
                "hulu",
                "gaming",
                "games",
                "nothing",
                "blanking out",
                "instagram",
                "scrolling",
                "snapchat",
                "snapchatting",
                "phone",
                "bed",
                "sleeping",
                "social media",
                "tik tok",
                "memes",
                "youtube",
                "facebook",
                "scrolling",
                "napping",
                "napped",
                "naps",
                "slept",
                "sleep"
            ],
        "ontcorona":
            [
                "corona",
                "coronavirus",
                "the virus",
                "virus",
                "covid",
                "covid-19"
            ],
        "ontnewjersey":
            [
                "new jersey",
                "nj",
                "garden"
            ],
        "ontcalifornia":
            [
                "california",
                "cali"
            ],
        "ontmichigan":
            [
                "michigan",
                "mich"
            ],
        "ontbadstate":
            [
                "louisiana",
                "la",
                "pennsylvania",
                "pa",
                "florida",
                "massachusetts",
                "ma",
                "illinois",
                "georgia",
                "ga",
                "texas",
                "washington",
                "connecticut",
                "indiana",
                "maryland",
                "md",
                "colorado",
                "ohio",
                "tennessee",
                "virginia",
                "north carolina",
                "nc",
                "missouri",
                "arizona",
                "wisconsin",
                "south carolina",
                "sc",
                "alabama",
                "nevada",
                "mississippi",
                "utah",
                "oklahoma",
                "district of columbia",
                "washington dc",
                "dc",
                "kentucky",
                "rhode island",
                "ri",
                "idaho",
                "oregon",
                "minnesota",
                "iowa",
                "arkansas",
                "ar",
                "kansas"
            ],
        "ontokaystate":
            [
                "delaware",
                "new mexico",
                "nm",
                "new hampshire",
                "nh",
                "puerto rico",
                "pr",
                "vermont",
                "vm",
                "maine",
                "nebraska",
                "west virginia",
                "wv",
                "hawaii",
                "south dakota",
                "sd"
                "montana",
                "guam",
                "north dakota",
                "wyoming",
                "alaska",
                "ak",
                "virgin islands",
                "northern mariana islands",
            ],
        "ontnewyork":
            [
                "new york",
                "nyc"
            ],
        "ontangry":
            [
                "angry",
                "mad",
                "terrifying",
                "anger"
            ],
        "onteating":
            [
                "eat",
                "eating",
                "feasting",
                "feast",
                "food",
                "nutrition",
                "vitamins",
                "calorie",
                "calories"
                "hungry",
                "binge",
                "binge-eating"
            ],
        "onteatingtoolittle":
            [
                "little",
                "enough",
                "hungry",
                "malnourished",
                "nourished",
                "small",
                "skinny",
                "wee",
                "bite-sized",
                "bitesized",
                "mini",
                "tiny"
            ],
        "onteatingtoomuch":
            [
                "lot",
                "indulge",
                "binge",
                "binging",
                "binge-eating",
                "too",
                "much",
                "bad",
                "overeat",
                "overeating",
                "over-eating",
                "feasting",
                "feast"
            ],
        "onthotline":
            [
                "die",
                "killed",
                "dead",
                "murdered",
                "committed",
                "self-harm",
                "cut",
                "cutting",
                "kill",
                "murder",
                "commit",
                "suicide"
            ],
        "ontunsure":
            [
                "unsure",
                "not sure",
                "dunno",
                "uncertain",
                "not",
                "idk",
                "don't",
                "know",
                "don't know",
                "no idea",
                "confused",
                "confuse"
            ],
        "ontwork":
            [
                "work",
                # "job",
                "money",
                "pay",
                "income",
                "Income",
                "money",
                "cash",
                "paycheck",
                "bills"
            ],
        "ontclubs":
            [
                "club",
                "Club",
                "sport",
                "Sport",
                "team",
                "Team",
                "group",
                "Group",
                "extracurricular",
                "Extracurricular",
                "activity",
                "Activity",
            ],
        "ontfamily":
            [
                "family",
                "parent",
                "sister",
                "brother",
                "kid",
                "child",
                "sibling",
                "cousin",
                "dad",
                "mom",
                "father",
                "mother",
                "parent",
                "parents",
                "cousin",
                "uncle",
                "nephew",
                "aunt",
                "grandparents",
                "grandma",
                "grandpa",
                "grandmother",
                "grandfather",
                "greatgrandfather",
                "maternal",
                "removed"
            ],
        "ontsad":
            [
                "sad",
                "down",
                "unhappy",
                "depressed",
                "depressing",
                "lost",
                "purposeless"
                "blue",
                "dumps",
                "gross",
                "bad",
                "sorrow",
                "sorrowful",
                "regretful",
                "downcast",
                "heavy",
                "miserable",
                "gloom",
                "gloomy",
                "low-spirited",
                "broken-hearted",
                "broken",
                "low",
                "wretched",
                "desolate",
                "crestfallen",
                "mournful",
                "doleful",
                "mourn",
                "mourning",
                "despondent",
                "out of sorts",
                "dejected",
                "awful",
                "inconsolable",
                "falling",
                "apart",
                "broken",
                "fell"
            ],
        "ontbadclub":
            [
                "resume",
                "looks",
                "appears",
                "not",
                "dunno",
                "don't",
                "Dunno",
                "no idea",
                "don't know",
                "not sure",
                "unsure",
                "idk",
                "Resume",
                "Idk"
            ],
        "ontfunclub":
            [
                "fun",
                "enjoy",
                "destress",
                "relaxing",
                "entertaining",
                "socializing",
                "friends",
                "entertain",
                "relax",
                "people",
                "social",
                "friend",
                "Fun",
                "great",
                "calming",
                "calm",
                "invigorate",
                "invigorating",
                "chill",
                "laid back",
                "vibe",
                "amusing",
                "amuse",
                "break",
                "like"
            ],
        "onttired":
            [
                "hours",
                "shifts",
                "shift",
                "tired",
                "fatigue",
                "fatigued",
                "sleeping",
                "exhausted",
                "sleep",
                "too",
                "exhaust",
                "worn",
                "overtired",
                "weary",
                "sleepy",
                "drowsy",
                "wearied",
                "sapped",
                "dog-tired",
                "spent",
                "drained",
                "debilitated",
                "prostrate",
                "enervated",
                "enervate",
                "jaded",
                "dead",
                "deadbeat",
                "shattered",
                "burnt",
                "knackered",
                "pooped"
            ],
        "ontschool":
            [
                "grades",
                "midterm",
                "final",
                "college",
                "exam",
                "school",
                "class",
                "test",
                "course",
                "balance",
                "balancing"
                "Grades",
                "study",
                "course",
                "studying",
                "professor",
                "teacher",
                "canvas",
                "assignment",
                "assignments"
            ],
        "ontemotion":
            [
                "ontnegative",
                "onpositive",
                "ontneutral",
                "ontunexpected"
            ],
        "ontnegative":
            [
                "anger",
                "disgust",
                "sadness",
                "fear",
                "bad",
                "scared",
                "scare",
                "scary",
                "onttired",
                "ontschool",
                "ontsad",
                "ontfamily",
                "ontdunno",
                "ontwork",
                "ontunsure",
                "lonely",
                "loneliness",
                "alone",
                "isolated",
                "sick",
                "fever",
                "corona",
                "coronavirus",
                "worried",
                "worry",
                "worrying",
                "not",
                "terrible"
            ],
        "ontpositive":
            [
                "happiness",
                "happy",
                "Happy",
                "joy",
                "love",
                "great",
                "euphoria",
                "euphoric",
                "super",
                "best",
                "amazing",
                "amaze",
                "amazed",
                "gold",
                "luck",
                "good",
                "positive",
                "radiated",
                "radiating",
                "delight",
                "delighted",
                "fantastic",
                "ecstatic",
                "generous",
                "loving",
                "grateful",
                "loved"
            ],
        "ontneutral":
            [
                "good",
                "ok",
                "fine",
                "okay",
                "neutral",
                "okay",
                "nothing",
                "meh",
                "don\'t care",
                "dont care",
                "bored",
                "boring",
                "bore"
            ],
        "ontunexpected":
            [
                "fear",
                "surprise",
                "startle",
                "jumped",
                "startled",
                "jump",
                "scare",
                "scared",
                "fright",
                "frightened",
                "terror",
                "terrorized",
                "terrorizing",
                "frightening",
                "panic",
                "panicked",
                "panicking",
                "alarm",
                "alarmed",
                "anxious",
                "anxiety",
                "feared",
                "jumped"
            ],
        "ontperception":
            [
                "control",
                "inability",
                "unable",
                "can't",
                "cant",
                "powerless",
                "lack"
            ],
        "ontaffirm":
            [
                "yes",
                "yea",
                "yeah",
                "yep",
                "mhm",
                "mmhmm",
                "mmhm",
                "mhmm",
                "okay",
                "ok",
                "sure",
                "alright",
                "i know",
                "sure",
                "noted",
                "agree",
                "great",
                "good",
                "understood",
                "understand",
                "proceed",
                "yup"
            ],
        "ontnegate":
            [
                "no",
                "nah",
                "nope",
                "No",
                "NO",
                "Nah",
                "NAH",
                "Nope",
                "NOPE",
                "na",
                "Na",
                "nah",
                "not at all",
                "not really",
                "disagree",
                #"I don't want to"
            ],
        "ontbecause":
            [
                "because",
                "since",
                "thus",
                "hence"
            ],
        ########## confrontation branch ontologies ##############
        "ontconfrontation":
            [
                "argument",
                "fight",
                "dispute",
                "disagreement",
                "physical",
                "yelling",
                "yelled",
                "yell",
                "name-calling",
                "screaming",
                "scream",
                "confront",
                "confronted",
                "confrontation"
            ],
        ### anger ontologies ###
        "ontanger":
            [
                "ontcontrol",
                "ontinability",
                "ontinevitable",
                "ontavoidable",
                "onttried",
                "ontfriend"
            ],
        "ontcontrol":
            [
                "control",
                "controlling",
                "controlled",
                "inflexible"
            ],
        "ontinevitable":
            [
                "inevitable",
                "was"
            ],
        "ontavoidable":
            [
                "avoidable",
                "avoid",
                "ran from",
                "avoided"
            ],
        "onttried":
            [
                "tried",
                "try",
                "trying"
            ],
        "ontfriend":
            [
                "friend",
                "friends"
            ],
        "ontshorttime":
            [
                "yesterday",
                "today",
                "day",
                "days",
                "week",
                "recent",
                "recently"
            ],
        "ontnumber":
            [
                "one",

            ],
        "onttimeperiod":
            [
                "yesterday",
                "today",
                "day",
                "days",
                "week",
                "recent",
                "recently",
                "weeks",
                "month"
            ],
        "ontaffected":
            [
                "china",
                "shanghai",
                "wuhan",
                "beijing",
                "spain",
                "madrid",
                "france",
                "paris",
                "korea",
                "seoul"
            ]
    }
}

knowledge = KnowledgeBase()
knowledge.load_json(ontology)
df = DialogueFlow(State.START, initial_speaker=DialogueFlow.Speaker.SYSTEM, kb=knowledge)

# name
# name_prompt
# name_answer
# name_reponse

#df.add_system_transition(State.START, State.PROMPT, '"Hi, how are you feeling today?"')
df.add_user_transition(State.PROMPT, State.P4D, "[$response=#ONT(onthotline)]")
df.add_system_transition(State.START, State.name, '"Hi, what\'s your name?"')
df.add_user_transition(State.name, State.name_prompt, '[$name=#POS(propn)]')
df.add_system_transition(State.name_prompt, State.PROMPT, '"Hi"$name"how are you feeling?"')
df.set_error_successor(State.PROMPT, State.corona_prompt)
###Angela: I couldn't get the above error successor to work and it always crashes for me after "hi whats your name"

df.add_system_transition(State.change_topic, State.start_topic, '"Then let\'s talk about something else that is bothering you in your life? What is stressing you out these days?"')
df.add_user_transition(State.start_topic, State.ENDwGREET, '[#ONT(ontnegate)]')
df.add_user_transition(State.next_topic, State.First_feeling_negative, '[$negative=#ONT(ontnegative)]')
df.set_error_successor(State.start_topic, State.Incomprehensible_Exit)

# The first user response feeling
df.add_user_transition(State.PROMPT, State.First_feeling_positive, '[$positive=#ONT(ontpositive)]')
df.add_user_transition(State.PROMPT, State.First_feeling_negative, '[$negative=#ONT(ontnegative)]')
df.add_user_transition(State.PROMPT, State.corona_prompt, '[$conju=#ONT(ontcorona)]')
####### Move to anger branch ##########################
df.add_user_transition(State.PROMPT, State.ANGER1, '[$confrontation=#ONT(ontangry)]')
####### Move to confrontation branch ##########################
df.add_user_transition(State.PROMPT, State.confrontation_answer, '[$confrontation=#ONT(ontconfrontation)]')

# Moves to corona branch
df.set_error_successor(State.PROMPT, State.corona_prompt)

# Feeling Positive

df.add_system_transition(State.First_feeling_positive, State.First_positive_prompt, '"That\'s great! Tell me more?"')
df.add_user_transition(State.First_positive_prompt, State.P4D, "[$response=#ONT(onthotline)]")

### small conversation branch for a positive response
df.add_user_transition(State.First_positive_prompt, State.First_positive_answer, '$thing=[#POS(verb)]')
## randomize response
df.add_user_transition(State.First_positive_prompt, State.corona_prompt, '[$conju=#ONT(ontcorona)]')
df.add_user_transition(State.First_positive_prompt, State.corona_prompt1, '[$conju=#ONT(ontcorona)]')
#! uncomment out above and the intro

###04242020: angela: i commented out the bottom part because it wasn't in my patch and the above paragraph is what i had instead
# above does not catch worried?
### small conversation branch for a positive response
# Need to make lemmatization for the verb
# lemmatizer = WordNetLemmatizer()
# df.add_user_transition(State.First_positive_prompt,State.First_positive_answer,'[$thing=#POS(verb)]')
## randomize response

df.set_error_successor(State.First_positive_prompt, State.First_positive_end)

df.add_system_transition(State.First_positive_answer, State.First_positive_reply, '[!"Did you" $thing "with other people?"]')
df.add_system_transition(State.First_positive_end, State.First_positive_ending, '"Let\'s talk about something else then."')
df.set_error_successor(State.First_positive_ending, State.U47)
df.add_user_transition(State.First_positive_reply, State.ENDwGREET, '[#ONT(ontnegate)]')
df.set_error_successor(State.First_positive_reply, State.First_positive_end2)
df.add_system_transition(State.First_positive_end2, State.First_positive_ending2, '"Right on!"')
df.set_error_successor(State.First_positive_ending2, State.ENDwGREET)

# Feeling Negative

df.add_system_transition(State.First_feeling_negative, State.First_negative_prompt, '[!"What\'s been making you feel"$negative"?"]')

df.add_user_transition(State.First_negative_prompt, State.U45, '[$confrontation=#ONT(ontlostjob)]')
#Not sure what this is supposed to lead from
#df.add_user_transition(State.First_feeling_negative, State.U45, '[$confrontation=#ONT(ontlostjob)]')
df.add_system_transition(State.U45, State.S45, '"I\'m sorry to hear that! These are crazy times. What are you going to do?"')
df.add_user_transition(State.S45, State.P4D, "[$response=#ONT(onthotline)]")
df.add_user_transition(State.S45, State.U46, "#ONT(ontunsure)")
df.add_user_transition(State.S45, State.U48, "#ONT(ontbadactivities)")
df.set_error_successor(State.S45, State.U48)
df.add_system_transition(State.U46, State.S46, '"I know it feels like the end of the world, but at least you have more time to spend with family and friends. Jobs come and go, but people are forever."')
df.add_user_transition(State.S46, State.P4D, "[$response=#ONT(onthotline)]")
df.add_user_transition(State.S46, State.U47, '[$reason=/.*/]')
df.add_system_transition(State.U48, State.S46,  '"I know it feels like the end of the world, but at least you have more time to spend with family and friends. Jobs come and go, but people are forever."')
df.add_system_transition(State.U47, State.S9, '"Well, how are you doing with social distancing?"')
#df.add_user_transition(State.S9, State.P4D, "[$response=#ONT(onthotline)]")

####### Move to confrontation branch ##########################
df.add_user_transition(State.First_negative_prompt, State.confrontation_answer, '[$confrontation=#ONT(ontconfrontation)]')

####### Move to anger branch ##########################
df.add_user_transition(State.First_negative_prompt, State.ANGER1, '[$confrontation=#ONT(ontangry)]')

# Angela transitions
df.add_user_transition(State.First_negative_prompt, State.corona_prompt, '[$conju=#ONT(ontcorona)]')
df.add_user_transition(State.First_negative_prompt, State.school_prompt, '[$response=#ONT(ontschool)]')
df.add_user_transition(State.First_negative_prompt, State.family_prompt, '[$response=#ONT(ontfamily)]')
df.add_user_transition(State.First_negative_prompt, State.work_prompt, '[$response=#ONT(ontwork)]')
# df.add_user_transition(State.First_negative_prompt, State.eating_prompt, "[$response=#ONT(onteating)]")
###04242020: angela: my patch says there was a difference but i can't find anything

# Error state foes to corona
df.set_error_successor(State.First_negative_prompt, State.corona_prompt)

#################################################

### ANGER BRANCH ###

df.add_system_transition(State.ANGER1, State.QUESTION1, '"Is there a person/activity that comes to mind that may cause you anger? "')
df.add_user_transition(State.QUESTION1, State.P4D, "[$response=#ONT(onthotline)]")
df.set_error_successor(State.QUESTION1, State.ANGER2)
df.add_system_transition(State.ANGER2, State.QUESTION2, '"Do you think getting angry was or was not inevitable? "')
df.add_user_transition(State.QUESTION2, State.P4D, "[$response=#ONT(onthotline)]")

# U4 POSSIBLE BRANCHES DEPENDING ON USER RESPONSE

df.add_user_transition(State.QUESTION1, State.PERSON, '[$person=#ONT(ontfamily,ontfriend)]')
df.add_user_transition(State.QUESTION1, State.ACTIVITY, '[$activity=#POS(verb)]')

df.add_user_transition(State.QUESTION2, State.INEVITABLE, '[$inevitable=#ONT(ontinevitable,ontaffirm)]')
df.add_user_transition(State.QUESTION2, State.AVOIDABLE, '[$avoidable=#ONT(ontavoidable,ontnegate)]')
# changed from generic error state
df.set_error_successor(State.QUESTION2, State.INEVDESCRIP)

# S5 TRANSITIONS
df.add_system_transition(State.PERSON, State.IDENTIFYPERSON, '[!"Thank you for telling me about your hard time dealing with "$person". \n Have you tried or resolving this issue directly with "$person"? \n Please feel free to tell me exactly how you went about fixing this relationship if you have already tried."]')
df.set_error_successor(State.IDENTIFYPERSON, State.confrontation_cause_self)

df.add_system_transition(State.ACTIVITY, State.IDENTIFYACTIVITY, '[!"Thank you for telling me about your difficult time engaging with that " $activity ". \n Have you tried talking to your friends or family about this " $activity"? \n Let me know explicitly whether you spoke to either your friends or family."]')
df.set_error_successor(State.IDENTIFYACTIVITY, State.family_self_pressure_y)

df.add_system_transition(State.INEVITABLE, State.INEVDESCRIP, '"Would you say that your anger partly stems from lack of control over your situation?"')
df.add_user_transition(State.INEVDESCRIP, State.P4D, "[$response=#ONT(onthotline)]")
df.add_user_transition(State.INEVDESCRIP, State.confrontation_treatment_relaxedbreathing, '[#ONT(ontaffirm)]')
df.set_error_successor(State.INEVDESCRIP, State.confrontation_treatment_journaling)

df.add_system_transition(State.AVOIDABLE, State.AVOIDDESCRIP, '"Did you feel more inability or control over trying to avoid the situation"')
df.add_user_transition(State.AVOIDDESCRIP, State.P4D, "[$response=#ONT(onthotline)]")
df.set_error_successor(State.AVOIDDESCRIP, State.confrontation_treatment_journaling)

# 4 possible responses
# it identifies a person
# they talk about an an activity
# there is a lack of control (yes/no) mindfulness/journaling
# they could have / could not have avoided situation


### END OF ANGER BRANCH ###


# angela's stuff
####################################################################################

# club_in_club
# club_in_club_answer


# Club activities
df.add_system_transition(State.school_prompt, State.club_prompt, '"Oh man, I feel that. I\'ve been there too. Are you in any clubs by chance?"')
df.add_user_transition(State.club_prompt, State.club_answer, '[$club=#ONT(ontclubs)]')

df.add_user_transition(State.club_prompt, State.club_in_club, '[#ONT(ontaffirm)]')
df.set_error_successor(State.club_prompt, State.club_enjoy_n)

df.add_system_transition(State.club_in_club, State.club_in_club_answer, '"That\'s great, which club are you in?"')
df.add_user_transition(State.club_in_club_answer, State.club_answer, '[$club=#ONT(ontclubs)]')
df.set_error_successor(State.club_in_club_answer, State.club_tell_more)

df.add_system_transition(State.club_tell_more, State.club_tell_more_answer, '"Can you tell me how you feel about your "$club"?"')
df.add_user_transition(State.club_tell_more_answer, State.U15, '[$club=#ONT(ontbadclub)]')
df.add_user_transition(State.club_tell_more_answer, State.U13, '[$club=#ONT(ontfunclub)]')
df.set_error_successor(State.club_tell_more_answer, State.club_answer)

# {#POS(noun),#POS(verb)}

df.add_system_transition(State.club_answer, State.club_enjoy, '"Are you enjoying the "$club" that you\'re in?"')
df.add_user_transition(State.club_enjoy, State.club_enjoy_y, '[#ONT(ontaffirm)]')
df.set_error_successor(State.club_enjoy, State.club_enjoy_n)

df.add_system_transition(State.club_enjoy_y, State.EXIT, '"That\'s nice! I\'m glad you have balance in your life."')

df.add_system_transition(State.club_enjoy_n, State.EXIT,  '"There are plenty of clubs around. Maybe when campuses open again, you can find a club that you enjoy."')

# add further depth if necessary

# family Branch

df.add_system_transition(State.family_prompt, State.family_answer, '"That\'s tough, do you feel like your family places pressure on you?"')
df.add_user_transition(State.family_answer, State.family_self, '[#ONT(ontnegate)]')
df.set_error_successor(State.family_answer, State.family_talk)

df.add_system_transition(State.family_talk, State.family_talk_answer, '"Have you talked to them about this stuff?"')
df.add_user_transition(State.family_talk_answer, State.family_talk_end, '[#ONT(onaffirm)]')
df.set_error_successor(State.family_talk_answer, State.family_talk_suggestion)

# havent talked with family
df.add_system_transition(State.family_talk_suggestion, State.family_distortion,
                         '"I feel like you should talk to them. Start with something small, and work your way through."') ##transition into cognitive distortion
df.add_user_transition(State.family_distortion, State.change_topic, '[#ONT(ontnegate)]')
df.set_error_successor(State.family_distortion, State.distortion_intro)

# already talked with family Even if you are not ready to talk to them we can focus on finding a way for you to prepare to talk to them.
df.add_system_transition(State.family_talk_end, State.distortion_intro, '"Way to go!"') ##transition into cognitive distortion

# pressure on self?
df.add_system_transition(State.family_self, State.family_self_pressure, '"Do you place pressure on yourself?"')  # ->activities
df.add_user_transition(State.family_self_pressure, State.family_talk_end, '[#ONT(ontnegate)]')
df.set_error_successor(State.family_self_pressure, State.family_self_pressure_y)

df.add_system_transition(State.family_self_pressure_y, State.family_self_pressure_college, '"It\'s not good to pressure yourself too much. Are you in college by any chance?"')
df.add_user_transition(State.family_self_pressure_college, State.school_prompt, '[#ONT(ontaffirm)]')
df.set_error_successor(State.family_self_pressure_college, State.family_self_pressure_job)

df.add_system_transition(State.family_self_pressure_job, State.family_self_pressure_job_answer, '"Do you have a job?"')
df.add_user_transition(State.family_self_pressure_job_answer, State.work_prompt, '[#ONT(ontaffirm)]')
df.set_error_successor(State.family_self_pressure_job_answer, State.A111) ## State A111 does not exist

# job branch
df.add_system_transition(State.work_prompt, State.work_answer, '"Where do you work?"')
df.set_error_successor(State.work_answer, State.work_enjoy)

df.add_system_transition(State.work_enjoy, State.work_enjoy_yn, '"That\'s great that you are still employed! Do you enjoy your job?"')
df.add_user_transition(State.work_enjoy_yn, State.work_enjoy_y, '[#ONT(ontaffirm)]')
df.set_error_successor(State.work_enjoy_yn, State.work_enjoy_n)

df.add_system_transition(State.work_enjoy_y, State.EXIT, '"I\'m glad you enjoy it!"')

df.add_system_transition(State.work_enjoy_n, State.work_stress_y, "Is it stressful?")
df.add_user_transition(State.work_stress_y, State.work_stress_not, '[#ONT(ontnegate)]')
# recommends mindfulness
df.set_error_successor(State.work_stress_y, State.confrontation_treatment_relaxedbreathing)

df.add_system_transition(State.work_stress_not, State.EXIT, '"It\'s awesome that you found a job that isn\'t stressful. More power to ya!"')


########### Confrontation Branch (Yuewu) ################################
df.add_system_transition(State.confrontation_answer, State.confrontation_cause_prompt, '"That would make me feel"$negative"too. How did the"$confrontation"start?"')
df.add_user_transition(State.confrontation_cause_prompt, State.P4D, "[$response=#ONT(onthotline)]")
df.set_error_successor(State.confrontation_answer, State.confrontation_cause_self)
# -> argument branchag

df.add_system_transition(State.confrontation_cause_error, State.confrontation_noCatch_self_prompt, '"Do you feel like the"$confrontation"started with something you did?"')
df.add_user_transition(State.confrontation_noCatch_self_prompt, State.P4D, "[$response=#ONT(onthotline)]")
df.add_user_transition(State.confrontation_noCatch_self_prompt, State.confrontation_cause_self, '[#ONT(ontaffirm)]')
df.set_error_successor(State.confrontation_noCatch_self_prompt, State.confrontation_cause_self)

##### argument branch
df.add_user_transition(State.confrontation_cause_prompt, State.confrontation_cause_self, '[{I,i}]')
df.add_system_transition(State.confrontation_cause_self, State.confrontation_usual_prompt,'"Is this something that has happened before?"')
# -> usual

df.add_user_transition(State.confrontation_cause_prompt, State.confrontation_cause_other, '[$person=#POS(propn)]')
df.add_system_transition(State.confrontation_cause_other, State.confrontation_intentional_yn, '"Do you think it was intentional?"')
# -> argument motive

df.set_error_successor(State.confrontation_cause_prompt, State.confrontation_cause_self)
# -> usual


##### argument motive
df.add_user_transition(State.confrontation_intentional_yn, State.confrontation_intentional_answer, '[#ONT(ontaffirm)]')
# -> exposure
df.set_error_successor(State.confrontation_intentional_yn, State.confrontation_intentional_answer)
# -> advice

df.add_system_transition(State.confrontation_intentional_answer, State.confrontation_intentional_motive_prompt,'"Why do you think they did that?"')
df.add_user_transition(State.confrontation_intentional_motive_prompt, State.confrontation_intentional_motive_answer, '[{because,Because} $reason=/.*/]')
df.set_error_successor(State.confrontation_intentional_motive_prompt, State.confrontation_cause_self)
# -> usual

df.add_system_transition(State.confrontation_intentional_motive_answer, State.confrontation_intentional_motive_yn, '"Do you think it\'s good to argue because"$reason"?"')
df.add_user_transition(State.confrontation_intentional_motive_yn, State.confrontation_exposure_prompt, '[#ONT(ontaffirm)]')
# -> usual
df.set_error_successor(State.confrontation_intentional_motive_yn, State.confrontation_treatment_journaling)
# -> advice


##### usual
df.add_user_transition(State.confrontation_usual_prompt, State.confrontation_usual_yn, '[#ONT(ontaffirm)]')
###04242020: Angela: Sarah mentioned in her notes that confrontation_usual_prompt only expects an affirmative answer and it has no unexpected input handling
df.add_system_transition(State.confrontation_usual_yn, State.confrontation_usual_when, '"When was the last time this happened?"')

df.add_user_transition(State.confrontation_usual_when, State.confrontation_usual_when1, '$number=#NER(NUM)')
df.add_user_transition(State.confrontation_usual_when, State.confrontation_advice_yn, '[never]')
df.set_error_successor(State.confrontation_usual_when, State.confrontation_usual_when_answer)

# TODO: Fix this transition

df.add_system_transition(State.confrontation_usual_when1, State.confrontation_usual_when_answer1, '"$number"')
df.add_user_transition(State.confrontation_usual_when_answer1, State.confrontation_usual_when2, '[#ONT(ontaffirm)]')
df.set_error_successor(State.confrontation_usual_when_answer1, State.confrontation_usual_when_answer)

df.add_system_transition(State.confrontation_usual_when2, State.confrontation_usual_when_answer2, '"Ah, gotcha. Any chance of reconciliation?"')
df.add_user_transition(State.confrontation_usual_when_answer2, State.confrontation_usual_when3, '[#ONT(ontaffirm)]')
df.set_error_successor(State.confrontation_usual_when_answer2, State.confrontation_advice_calmer_answer)

df.add_system_transition(State.confrontation_usual_when3, State.confrontation_usual_when_answer3, '"That\'s great to hear. People have their"$confrontation"s, but it\'s always good to make up afterwards."')
df.set_error_successor(State.confrontation_usual_when_answer3, State.ENDwGREET)

# df.add_user_transition(State.confrontation_usual_when,State.confrontation_usual_when_answer,"$time=#NER(date)")
# -> exposure (because no time catch)
df.add_system_transition(State.confrontation_usual_when_answer, State.confrontation_usual_when_yn, '"Have you had a"$confrontation"?"often?"')
###04242020: Angela: error parsing above, as said in Sarah's notes

df.add_user_transition(State.confrontation_usual_when_yn, State.confrontation_advice_yn, '[#ONT(ontaffirm)]')
# -> advice
df.set_error_successor(State.confrontation_usual_when_yn, State.confrontation_exposure_end)
# -> exposure

##### advice
df.add_system_transition(State.confrontation_advice_yn, State.confrontation_advice_yn_answer, '"Could I offer you some advice?"')
df.add_user_transition(State.confrontation_advice_yn_answer, State.confrontation_advice_calmer_yn, '[#ONT(ontaffirm)]')
df.set_error_successor(State.confrontation_advice_yn_answer, State.ENDwGREET)
# -> END
df.add_system_transition(State.confrontation_advice_calmer_yn, State.confrontation_advice_calmer_answer,'"Okay, do you think a calmer attitude would have mitigated the"$confrontation"?"')
df.set_error_successor(State.confrontation_advice_calmer_answer, State.confrontation_treatment_relaxedbreathing)

##### exposure
df.add_system_transition(State.confrontation_exposure_prompt, State.confrontation_exposure_answer,'"Why do you spend time with them?"')
df.add_user_transition(State.confrontation_exposure_answer, State.confrontation_exposure_why,'[{because,Because} $reason=/.*/]')
df.set_error_successor(State.confrontation_exposure_answer, State.confrontation_exposure_why)

df.add_system_transition(State.confrontation_exposure_why, State.confrontation_exposure_yn, '"Do you think you\'ll talk with them again soon?"')

df.add_user_transition(State.confrontation_exposure_yn, State.confrontation_treatment_relaxedbreathing,"#ONT(ontaffirm)")  ### Relaxed breathing
df.add_user_transition(State.confrontation_exposure_yn, State.confrontation_exposure_end, '[#ONT(ontnegate)]')
# -> advice
df.set_error_successor(State.confrontation_exposure_yn, State.confrontation_exposure_end)

df.add_system_transition(State.confrontation_exposure_end, State.END, '"I think it\'s best to spend some time cooling off after a"$confrontation"."')

##### Treatment branch
### Relaxed breathing
df.add_system_transition(State.confrontation_treatment_relaxedbreathing, State.confrontation_treatment_relaxedbreathing_response, '"I want to recommend an exercise using mindfulness. Is that something you\'d be interested in? "')
df.add_user_transition(State.confrontation_treatment_relaxedbreathing_response, State.confrontation_treatment_relaxedbreathing2, "#ONT(ontaffirm)")
df.set_error_successor(State.confrontation_treatment_relaxedbreathing_response, State.ENDwGREET)
df.add_system_transition(State.confrontation_treatment_relaxedbreathing2,
                         State.confrontation_treatment_relaxedbreathing_response2,
                         '"Mindfulness is the practice of taking different perspectives on things, often with breathing exercises and meditation. '
                         'Mindfulness can teach: Paying attention to what is going on around you. Participating without being self-conscious, '
                         'Taking a non-judgmental stance, Focusing on the moment without distraction from other ideas or events, '
                         'and Doing what works rather than second-guessing yourself."')
df.set_error_successor(State.confrontation_treatment_relaxedbreathing_response2, State.ENDwGREET)
### Journaling
df.add_system_transition(State.confrontation_treatment_journaling, State.confrontation_treatment_relaxedbreathing_response, '"Based on your responses, I would recommend journaling. Is that something you\'d be interested in? "')
df.add_user_transition(State.confrontation_treatment_journaling_response, State.confrontation_treatment_journaling2, '[#ONT(ontaffirm)]')
df.set_error_successor(State.confrontation_treatment_journaling_response, State.ENDwGREET)
df.add_system_transition(State.confrontation_treatment_journaling2, State.confrontation_treatment_journaling_response2,
                         '"Journaling is the practice of writing for therapeutic purposes. Often done with specific exercises, '
                         'journaling is helpful in identifying and processing stressful or difficult events in a persons life."')
# -> END
df.set_error_successor(State.confrontation_treatment_journaling_response2, State.EXIT)
# ENDwGREET
df.add_system_transition(State.ENDwGREET, State.EXIT, '"Alright, have a good day!"') ##cognitive distortion
#############ANGELA
df.add_system_transition(State.corona_prompt, State.S2, '"The world is pretty crazy now isn\'t it? Are you in the US?"')
df.add_system_transition(State.corona_prompt1, State.S2, '"The pandemic has changed our lives, hasn\'t it? Are you in the US?"')
df.add_user_transition(State.S2, State.U7, '[#ONT(ontaffirm)]')
df.add_user_transition(State.S2, State.U8, '[#ONT(ontnegate)]')
df.add_system_transition(State.U7, State.S1, '"Which state are you in right now?"')
df.add_user_transition(State.S1, State.U1, '[#ONT(ontnewjersey)]')
df.add_user_transition(State.S1, State.U2, '[#ONT(ontnewyork)]')
df.add_user_transition(State.S1, State.U3, '[#ONT(ontcalifornia)]')
df.add_user_transition(State.S1, State.U4, '[#ONT(ontmichigan)]')
df.add_user_transition(State.S1, State.U5, '[#ONT(ontbadstate)]')
df.add_user_transition(State.S1, State.U6, '[#ONT(ontokaystate)]')
df.add_user_transition(State.S1, State.U42, "#ONT(ontgeorgia)")
df.set_error_successor(State.S1, State.U8)
df.set_error_successor(State.S2, State.U8)
##### Error handle

df.add_system_transition(State.corona_not_us, State.corona_located, '"Oh, where are you currently located?"')
df.add_user_transition(State.corona_located, State.corona_affected, '[$country=#ONT(ontaffected)]')
df.add_user_transition(State.corona_located, State.corona_unknown, '[$location=#POS(propn)]')
df.set_error_successor(State.corona_located, State.U8)

df.add_system_transition(State.corona_affected, State.corona_affected_response, '"I hear that cases are pretty serious in"$country", how are you doing?"')
df.add_user_transition(State.corona_affected_response, State.U9, '[#ONT(ontpositive)]')
df.add_user_transition(State.corona_affected_response, State.U10, '[#ONT(ontnegative)]')

df.add_system_transition(State.corona_unknown, State.corona_unknown_response, '"I haven\'t heard much about"$location", can you tell me more about the situation there?"')
df.add_user_transition(State.corona_unknown_response, State.U9, "#ONT(ontpositive)")
df.add_user_transition(State.corona_unknown_response, State.U10, "#ONT(ontnegative)")
df.set_error_successor(State.corona_unknown_response, State.U8)

#####

# df.add_system_transition(State.U6, State.S3, '"Oh, I heard that corona not too bad there! How are you doing with social distancing?"')
df.add_system_transition(State.U42, State.S40, '"I\'m in Georgia too! Don\'t you think that the governor lifted the stay-at-home order too early?"')
df.add_user_transition(State.S40, State.U80, "#ONT(ontaffirm)")
df.add_user_transition(State.S40, State.U81, "#ONT(ontnegate)")
df.add_user_transition(State.S40, State.U82, "#ONT(ontunsure)")
df.set_error_successor(State.S40, State.S82)
df.add_system_transition(State.U80, State.S80, '"President Trump disagreed with our Governor, too."')
df.add_system_transition(State.U81, State.S81, '"Oh, well, I\'m sure there are people who agree with you."')
df.add_system_transition(State.U82, State.S82, '"Well, I definitely think he did. President Trump does, too."')
df.add_user_transition(State.S80, State.U41, '[$reason=/.*/]')
df.add_user_transition(State.S81, State.U41, '[$reason=/.*/]')
df.add_user_transition(State.S82, State.U41, '[$reason=/.*/]')
df.add_system_transition(State.U41, State.S9, '"Well, how are you doing with social distancing?"')
df.add_system_transition(State.U6, State.S3,  '"Oh, I heard that corona is not too bad there! My friend Alex lives there. What do you think?"')
df.add_user_transition(State.S3, State.U83, "#ONT(ontunsure)")
df.add_user_transition(State.S3, State.U84, "#ONT(ontaffirm)")
df.add_user_transition(State.S3, State.U85, "#ONT(ontnegate)")
df.add_user_transition(State.S3, State.U86, "#ONT(ontnegative)")
df.set_error_successor(State.S3, State.S9)
df.add_system_transition(State.U83, State.S83, '"I guess you wouldn\t know, being quarantined and all."')
df.add_system_transition(State.U84, State.S84, '"I\'m glad you seem relatively calm."')
df.add_system_transition(State.U85, State.S85, '"Yikes, I hope you\'re staying calm!"')
df.add_system_transition(State.U86, State.S85, '"Yikes, I hope you\'re staying calm!"')
df.add_user_transition(State.S83, State.U87, '[$reason=/.*/]')
df.add_user_transition(State.S84, State.U87, '[$reason=/.*/]')
df.add_user_transition(State.S85, State.U87, '[$reason=/.*/]')
df.add_user_transition(State.S86, State.U87, '[$reason=/.*/]')
df.add_system_transition(State.U87, State.S9, '"Well, how are you doing with social distancing?"')
df.add_system_transition(State.U5, State.S4,  '"Yikes, I hear corona is spreading very quickly there. How are you doing with social distancing?"')
df.add_user_transition(State.S4, State.P4D, "[$response=#ONT(onthotline)]")
df.add_system_transition(State.U1, State.S70, '"Yikes, NJ is second only to New York in number of cases! Are you in Bergen by any chance?"')
df.add_user_transition(State.S70, State.U70, "#ONT(ontaffirm)")
df.add_user_transition(State.S70, State.U71, "#ONT(ontunsure)")
df.add_user_transition(State.S70, State.U72, "#ONT(ontnegate)")
df.add_system_transition(State.U70, State.S71, '"Oh no! I\'ve heard that Bergen has the highest number of cases in New Jersey."')
df.add_system_transition(State.U71, State.S72, '"Well, I hope you aren\'t. Bergen has the highest number of cases in New Jersey."')
df.add_system_transition(State.U72, State.S73, '"That\'s good. My parents live there and they are scared as Bergen is highly infected."')
df.set_error_successor(State.S70, State.U16)
#does above work?
df.add_user_transition(State.S71, State.U73, '[$reason=/.*/]')
df.add_user_transition(State.S72, State.U74, '[$reason=/.*/]')
df.add_user_transition(State.S73, State.U74, '[$reason=/.*/]')
df.add_system_transition(State.U73, State.S5, '"How are you doing with social distancing?"')
df.add_system_transition(State.U74, State.S5, '"How are you doing with social distancing?"')
df.add_system_transition(State.U75, State.S5, '"How are you doing with social distancing?"')
df.add_user_transition(State.S5, State.P4D, "[$response=#ONT(onthotline)]")

####
df.add_system_transition(State.U2, State.S6, '"Yikes, NYC is very scary right now. Do you live with others?"')
df.add_user_transition(State.S6, State.U76, '[#ONT(ontaffirm)]')
df.add_user_transition(State.S6, State.U77, '[#ONT(ontunsure)]')
df.add_user_transition(State.S6, State.U78, '[#ONT(ontnegate)]')
df.add_system_transition(State.U76, State.S74, '"Well, I hope all of you stay cautious as it will be very bad if one of you gets infected."')
df.add_system_transition(State.U77, State.S75, '"Well, if you do, I hope all of you stay cautious as it will be very bad if one of you gets infected"')
df.add_system_transition(State.U78, State.S76, '"That\'s good. You won\'t have to worry about a housemate getting infected."')
df.set_error_successor(State.S6, State.U16)
df.add_user_transition(State.S74, State.U88, '[$reason=/.*/]')
df.add_user_transition(State.S75, State.U89, '[$reason=/.*/]')
df.add_user_transition(State.S76, State.U90, '[$reason=/.*/]')
df.add_system_transition(State.U88, State.S5, '"How are you doing with social distancing?"')
df.add_system_transition(State.U89, State.S5, '"How are you doing with social distancing?"')
df.add_system_transition(State.U90, State.S5, '"How are you doing with social distancing?"')
####
df.add_system_transition(State.U3, State.S7,  '"Not as bad as New York, but it seems to be spreading in California as well. How are you doing with social distancing?"')
df.add_system_transition(State.U4, State.S8,  '"Yeah, I\'m personally surprised Michigan is up there with NY and NJ in coronavirus cases! How are you doing with social distancing?"')
df.add_system_transition(State.U8, State.S9, '"Well, how are you doing with social distancing?"')
df.add_user_transition(State.S9, State.P4D, "[$response=#ONT(onthotline)]")
df.add_user_transition(State.S3, State.U9, '[$checkin=#ONT(ontpositive,ontneutral)]')
df.add_user_transition(State.S3, State.U10, '[$checkin=#ONT(ontnegative)]')
df.add_user_transition(State.S4, State.U9, '[$checkin=#ONT(ontpositive,ontneutral)]')
df.add_user_transition(State.S4, State.U10, '[$checkin=#ONT(ontnegative)]')
df.add_user_transition(State.S8, State.U9, '[$checkin=#ONT(ontpositive,ontneutral)]')
df.add_user_transition(State.S8, State.U10, '[$checkin=#ONT(ontnegative)]')
df.add_user_transition(State.S7, State.U9, '[$checkin=#ONT(ontpositive,ontneutral)]')
df.add_user_transition(State.S7, State.U10, '[$checkin=#ONT(ontnegative)]')
df.add_user_transition(State.S6, State.U9, '[$checkin=#ONT(ontpositive,ontneutral)]')
df.add_user_transition(State.S6, State.U10, '[$checkin=#ONT(ontnegative)]')
df.add_user_transition(State.S5, State.U9, '[$checkin=#ONT(ontpositive,ontneutral)]')
df.add_user_transition(State.S5, State.U10, '[$checkin=#ONT(ontnegative)]')
df.add_user_transition(State.S9, State.U9, '[$checkin=#ONT(ontpositive,ontneutral)]')
df.add_user_transition(State.S9, State.U10, '[$checkin=#ONT(ontnegative)]')

# S3 - S9
df.set_error_successor(State.S3, State.U16)
df.set_error_successor(State.S4, State.U16)
df.set_error_successor(State.S5, State.U16)
df.set_error_successor(State.S6, State.U16)
df.set_error_successor(State.S7, State.U16)
df.set_error_successor(State.S8, State.U16)
df.set_error_successor(State.S9, State.U16)

df.add_system_transition(State.U9, State.S10, '"Well I\'m glad you\'re not suffering! What do you spend your free time doing?"')
df.add_system_transition(State.U10, State.S11, '"Oh no! I\'m sorry that the current events have affected your mental health. What have you been doing to keep busy?"')
df.add_user_transition(State.S11, State.P4D, "[$response=#ONT(onthotline)]")
df.add_user_transition(State.S10, State.U12, '[$checkin=#ONT(ontstillbusy)]')
df.add_user_transition(State.S10, State.U13, '[$checkin=#ONT(ontgoodactivities)]')
df.add_user_transition(State.S10, State.U14, '[$checkin=#ONT(ontbadactivities)]')
df.add_user_transition(State.S10, State.U15, '[$checkin=#ONT(ontwasteoftime)]')
df.set_error_successor(State.S10, State.U16)
df.set_error_successor(State.S11, State.U16)

# We're skipping back to therapy section S17 / S18 (comments can be deleted)
# error_state_activity
# therapy_lead_in
# therapy_lead_in_response
# df.set_error_successor(State.S10,State.error_state_activity)
# df.add_system_transition(State.error_state_activity,State.therapy_lead_in_response, '"How are you feeling right now?"')
# df.add_user_transition()

# States S11
df.add_user_transition(State.S11, State.U12, '[$checkin=#ONT(ontstillbusy)]')
df.add_user_transition(State.S11, State.U13, '[$checkin=#ONT(ontgoodactivities)]')
df.add_user_transition(State.S11, State.U14, '[$checkin=#ONT(ontbadactivities)]')
df.add_user_transition(State.S11, State.U15, '[$checkin=#ONT(ontwasteoftime)]')
df.set_error_successor(State.S11, State.U16)

# States S12
df.add_system_transition(State.U12, State.S12, '"Well, it\'s good that you\'re still busy but make sure you make time for yourself! Do you do any activities to relax?"')
df.add_user_transition(State.S12, State.U13, '[$checkin=#ONT(ontgoodactivities)]')
df.add_user_transition(State.S12, State.U15, '[$checkin=#ONT(ontwasteoftime)]')
df.add_user_transition(State.S12, State.U16, '[$checkin=#ONT(ontaffirm)]')
df.add_user_transition(State.S12, State.U17, '[$checkin=#ONT(ontnegate)]')
df.set_error_successor(State.S12, State.U13)

# #activity verb catch
df.add_system_transition(State.corona_activity, State.corona_activity_response, '"That\'s great, do you do"$action"regularly?"')
df.add_user_transition(State.corona_activity_response, State.U13, '[#ONT(ontaffirm)]')
df.add_user_transition(State.corona_activity_response, State.corona_not_regularly, '[#ONT(ontnegate)]')
df.set_error_successor(State.corona_activity_response, State.U30)

df.add_system_transition(State.corona_not_regularly, State.corona_not_regularly_response, '"Hmmm... is it something that you would like to do more regularly?"')
df.add_user_transition(State.corona_not_regularly_response, State.corona_not_regularly_help, '[$checkin=#ONT(ontaffirm)]')
df.set_error_successor(State.corona_not_regularly_response, State.corona_unable_to_advance)

df.add_system_transition(State.corona_not_regularly_help, State.corona_not_regularly_help_response, '"Would you like some help keeping a more consistent schedule?"')
df.add_user_transition(State.corona_not_regularly_help_response, State.confrontation_treatment_journaling, '[$checkin=#ONT(ontaffirm)]')
df.set_error_successor(State.corona_not_regularly_help_response, State.corona_activity_okay)

df.add_system_transition(State.corona_activity_okay, State.corona_activity_response_else, '"That\'s alright, is there anything else you would like to talk about, maybe school or work or something else?"') #Working here
df.add_user_transition(State.corona_activity_response_else, State.school_prompt, '[$response=#ONT(ontschool)]')
df.add_user_transition(State.corona_activity_response_else, State.family_prompt, '[$response=#ONT(ontfamily)]')
df.add_user_transition(State.corona_activity_response_else, State.work_prompt, '[$response=#ONT(ontwork)]')
df.set_error_successor(State.corona_activity_response_else, State.corona_unable_to_advance)

df.add_system_transition(State.corona_unable_to_advance, State.EXIT, '"Sorry, I\'m not quite advanced enough to handle that yet. Come back a bit later and see if I\'ve learned anything new."')

# States S13
df.add_system_transition(State.U16, State.S13, '"Hmm. That\'s interesting. What other things have you been doing?"')
df.add_user_transition(State.S13, State.U13, '[$checkin=#ONT(ontgoodactivities)]')
df.add_user_transition(State.S13, State.U14, '[$checkin=#ONT(ontbadactivities)]')
df.add_user_transition(State.S13, State.U15, '[$checkin=#ONT(ontwasteoftime)]')
df.set_error_successor(State.S13, State.U30)

# States S14
df.add_system_transition(State.U17, State.S14, '"That\'s not good! I know that life feels like it\'s at a standstill right now, but you should still use your time wisely. Do you have any ideas for activities you could do?"')
df.add_user_transition(State.S14, State.P4D, "[$response=#ONT(onthotline)]")
df.add_user_transition(State.S14, State.U13, '[$checkin=#ONT(ontgoodactivities)]')
df.add_user_transition(State.S14, State.U14, '[$checkin=#ONT(ontbadactivities)]')
df.add_user_transition(State.S14, State.U15, '[$checkin=#ONT(ontwasteoftime)]')
df.add_user_transition(State.S14, State.U18, '[$checkin=#ONT(ontnegate)]')
df.set_error_successor(State.S14, State.U19)

# States U15
df.add_system_transition(State.U13, State.EXIT,'"That\'s a great way to spend your time! If you keep doing that, I think you\'ll be okay once this all passes. I would also suggest setting routines to instill normality."') #cognitive distortion
df.add_system_transition(State.U14, State.S18, '[!"Do you think"$checkin"can be part of a healthy life?"]')
df.set_error_successor(State.S18, State.U15)
df.add_system_transition(State.U15, State.change, '"At least you\'re enjoying yourself. Do you think you would want to change this habit?"') #cognitive distortion
df.add_system_transition(State.U19, State.EXIT, '"Thanks for talking to me today! Hope we can talk again sometime."') #cognitive distortion
df.add_user_transition(State.change, State.want_change, '[#ONT(ontaffirm)]')
df.set_error_successor(State.change, State.ENDwGREET)
##S17 Therapy Section
##States used: U30, U31, S30
df.add_system_transition(State.U30, State.EXIT, '"Great to hear that and I think it\'s time to conclude our session. Thanks for talking to me today!"') #cognitive distortion
# df.add_system_transition(State.U30, State.EXIT, '"Great to hear that and I think it\'s time to conclude our session. Thanks for talking to me today! Hope we can talk again sometime."')

# S18 Therapy section
df.add_user_transition(State.S18, State.U15, '[$affirm_healthy=#ONT(ontaffirm)]')
df.add_user_transition(State.S18, State.filtering, '[$negate_healthy=#ONT(ontnegate)]')
df.set_error_successor(State.S18, State.U15)

#Cognitive Distortions
dont_know = '[{' \
            'dont know,do not know,unsure,[not,{sure,certain}],hard to say,no idea,uncertain,[!no {opinion,opinions,idea,ideas,thought,thoughts,knowledge}],' \
            '[{dont,do not}, have, {opinion,opinions,idea,ideas,thought,thoughts,knowledge}],' \
            '[!{cant,cannot,dont} {think,remember,recall}]' \
            '}]'
df.add_system_transition(State.distortion_intro, State.distortion, '"Let\'s try to work through some of the problems you are facing."')
df.add_user_transition(State.distortion, State.filtering, '[#ONT(ontaffirm)]')
df.set_error_successor(State.distortion, State.Incomprehensible_Exit)
#df.add_user_transition(State.distortion, State.polar_intro, )
df.add_system_transition(State.filtering, State.filtering_ans, '"Do you think you ignore the positive aspects of your life?"')
df.add_user_transition(State.filtering_ans, State.filtering_yes, '[#ONT(ontaffirm)]')
df.add_user_transition(State.filtering_ans, State.EXIT, '[#ONT(ontnegate)]')
df.add_user_transition(State.filtering_ans, State.filtering_unsure, dont_know)
df.add_system_transition(State.filtering_yes, State.filtering_treatment, '"I want to recommend some ways for you to cope with the way you are feeling."')

#df.error_successor(State.filtering_treatment, State.journal)
#df.add_system_transition(State.journal, State.first_journal_entry, )
#df.add_system_transition(State.polar_intro, State.polar, '"Why is it stressful?"')
# Change Realization
df.add_system_transition(State.want_change, State.change_response, '[!"This is an excellent first step towards changing your life. \nYou most likely will not be able to cut"$checkin"out of your life entirely. Acknowledgement is the first step. Do you want the next step?"]')
df.add_user_transition(State.change_response, State.change_yes, '[#ONT(ontaffirm)]')
df.add_system_transition(State.change_yes, State.change_focus, '"Now you need to focus on your habit. It appears to be a coping mechanism for you. \nI want you to think of something that you want to spend more of your time doing. Now you need to imagine yourself doing what you think is a better alternative. \nCan you do this?"')
df.add_user_transition(State.change_focus, State.change_focus_yes, '[#ONT(ontaffirm)]')
df.add_system_transition(State.change_focus_yes, State.changed_focus, '"You are doing great. Now you should journal about the amount of time you spend on your old habit and your new habit. \nYou want to start doing a little bit of both in the beginning and slowly switch to what you want to be doing more of.\nWould you be interested in any other recommendations I have?"')
#add activity scheduling
df.add_user_transition(State.changed_focus, State.more_journal, '[#ONT(ontaffirm)]')

#need to add more journal
df.set_error_successor(State.change_response, State.ENDwGREET)
df.set_error_successor(State.change_focus, State.ENDwGREET)
df.set_error_successor(State.changed_focus, State.ENDwGREET)


# goodbye_statement
# end
# df.set_error_successor(State.EXIT,State.goodbye_statement)
# df.add_system_transition(State.goodbye_statement,State.end,'"Goodbye!"')
# df.add_user_transition(State.end,State.goodbye_statement,'[#ONT(ontaffirm)]')
# df.set_error_successor(State.end,error_successor=State.end)
##above is from old patch, below is from new

# goodbye_statement
# end
df.add_system_transition(State.Incomprehensible_Exit, State.end, '"I\'m sorry I do not understand what you are saying"')
df.set_error_successor(State.EXIT, State.goodbye_statement)
df.add_system_transition(State.goodbye_statement, State.end, '"Goodbye! Talk to you some other time."')
###Angela: above sent me in an infinite loop
df.set_error_successor(State.end, error_successor=State.end)

# hotlinecatch
df.add_user_transition(State.First_negative_prompt, State.P4D, "[$response=#ONT(onthotline)]")
df.add_system_transition(State.P4D, State.U4D1, '"Oh no! I am very afraid that this may be a violent or life-threatening situation. Here are some hotlines: Suicide: 8002738255, Domestic violence: 8007997233, Sexual assault: 8006564673."')
df.add_user_transition(State.U4D1, State.P4D1, "/.*/")
df.add_system_transition(State.P4D1, State.END, '"Goodbye! Thanks for talking to me today!"')

if __name__ == '__main__':
    df.run(debugging=False)
class State(Enum):
    START = 0
    PROMPT = 1
    ERR = 2
    END = 3
    EXIT = auto()
    PROMPT2 = 4
    Ending = auto()
    # These are for the first response
    First_feeling_positive = auto()
    First_feeling_negative = auto()
    Catch_feeling_positive = auto()
    Catch_feeling_negative = auto()
    First_feeling_good = auto()

    # Positivity Tree
    First_positive_prompt = auto()

    # Negative Tree
    First_negative_prompt = auto()
    First_negative_response = auto()
    U2A = auto()
    U2B = auto()

    # 3rd
    P3 = auto()
    P3B = auto()
    U3A = auto()
    ERR2 = auto()

    ###ANGER STATES###
    ANGER1 = auto()
    ANGER2 = auto()
    QUESTION1 = auto()
    QUESTION2 = auto()
    PERSON = auto()
    ACTIVITY = auto()
    INEVITABLE = auto()
    AVOIDABLE = auto()
    IDENTIFYPERSON = auto()
    IDENTIFYACTIVITY = auto()
    INEVDESCRIP = auto()
    AVOIDDESCRIP = auto()
    TRIED = auto()
    NOTTRIED = auto()
    FRIEND = auto()
    FAMILY = auto()
    INEVITABLERESPYES = auto()
    INEVITABLERESPNO = auto()
    AVOIDABLERESPCONTROL = auto()
    AVOIDABLERESPINABILITY = auto()
    CHECKIN = auto()
    CHECKIN1 = auto()
    CHECKIN2 = auto()
    CHECKIN3 = auto()
    CHECKIN4 = auto()
    CHECKIN5 = auto()
    CHECKIN6 = auto()
    CHECKIN7 = auto()
    CHECKINRESP = auto()
    CHECKINRESP1 = auto()
    CHECKINRESP2 = auto()
    CHECKINRESP3 = auto()
    CHECKINRESP4 = auto()
    CHECKINRESP5 = auto()
    CHECKINRESP6 = auto()
    CHECKINRESP7 = auto()
    TRIEDINTERMISSION = auto()
    NOTTRIEDINTERMISSION = auto()
    FRIENDINTERMISSION = auto()
    FAMILYINTERMISSION = auto()
    INEVITABLEINTERMISSION = auto()
    NOTINEVITABLEINTERMISSION = auto()
    CONTROLINTERMISSION = auto()
    NOTCONTROLINTERMISSION = auto()
    ERRANG = auto()
    ERRANG1 = auto()
    ERRANG2 = auto()
    ERRANG3 = auto()
    ERRANG4 = auto()
    ERRANG5 = auto()

    # DEPRESSION
    P4CD = auto()
    P4C = auto()
    P4C1 = auto()
    U4C1 = auto()
    U4C2 = auto()
    U4C3 = auto()
    U4C4 = auto()
    U4C5 = auto()
    P4C1A = auto()
    P4C1Asecond = auto()
    P4C2B = auto()
    P4C3C = auto()
    P4C4D = auto()
    P4C4E = auto()
    U4C4E1 = auto()
    U4C4D2 = auto()
    U4C4D1 = auto()
    U4C4D1A1 = auto()
    P4C4D2A = auto()
    P4C4D1A = auto()
    P4C4E1A = auto()
    P4C2B1A = auto()
    P4C2B2A = auto()
    U4C4E1A1 = auto()
    U4C4D1A2 = auto()
    U4C4E1A2 = auto()
    P4C4E1A1A = auto()
    U4C4E1A1A = auto()
    U4C4E1A1B = auto()
    U4C4D2A1 = auto()
    U4C2B1 = auto()
    U4C2B2 = auto()
    U4C2B3 = auto()
    U4C2B4 = auto()
    P4C2B4A = auto()
    U4C2B2A3 = auto()
    U4C2B2A2 = auto()
    U4C2B2A1 = auto()
    U4C2B1A2 = auto()
    U4C2B1A1 = auto()
    P4C2B1A1A = auto()
    P4C4E1A2A = auto()
    U4C4E1A2A1 = auto()
    U4C4E1A2A2 = auto()
    P4C2B2A3A = auto()
    P4C4D1A1A = auto()
    P4C2B2A1A = auto()
    P4C2B1A2A = auto()
    U4C2B1A1A1 = auto()
    P4C2B1A1A1A = auto()
    U4C2B1A1A1A1 = auto()
    U4C2B1A1A1A2 = auto()
    U4C2B2A1A1 = auto()
    U4C4D1A1A1 = auto()
    P4C4D1A2A = auto()
    U4C4D1A2A2 = auto()
    U4C4D1A2A1 = auto()
    U4C2B1A2A1 = auto()
    U4C2B1A2A2 = auto()
    P4C2B1A2A1A = auto()
    U4C2B1A2A1A1 = auto()
    U4C2B1A2A1A2 = auto()
    P4C4D1A1A1A = auto()
    P4C2B1A2A2A = auto()
    P4C2B2A1A1A = auto()
    U4C4D1A1A1A1 = auto()
    U4C2B2A1A1A2 = auto()
    U4C2B2A1A1A1 = auto()
    U4C2B1A2A2A1 = auto()
    P4C2B2A1A1A1A = auto()
    U4C2B2A1A1A1A1 = auto()
    U4C2B2A1A1A1A2 = auto()
    U4C2B2A1A1A2A1 = auto()
    P4C2B2A1A1A2A = auto()
    U4C2B2A1A1A2A2 = auto()
    P4C4D1A1A1A1A = auto()
    P4CE = auto()
    P4CERR = auto()
    P4CERR2 = auto()
    P4CERR3 = auto()
    P4CERR4 = auto()
    P4CERR5 = auto()
    P4CERR6 = auto()
    P4CERR7 = auto()
    P4CERR8 = auto()
    P4CERR9 = auto()
    P4CERR10 = auto()
    P4CERR11 = auto()
    P4CERR12 = auto()
    P4CERR13 = auto()
    P4CERR14 = auto()
    P4CERR15 = auto()
    P4CERR16 = auto()
    P4CERR17 = auto()
    P4CERR18 = auto()
    P4CERR19 = auto()
    P4CERR20 = auto()
    P4CERR21 = auto()
    A11 = auto()
    A111 = auto()
    A1111 = auto()

    P4D = auto()
    U4D1 = auto()
    P4D1 = auto()

    # eating
    P4E = auto()
    U4E1 = auto()
    U4E2 = auto()
    P4E1A = auto()
    P4E2A = auto()
    U4E1A2 = auto()
    U4E1A1 = auto()
    U4E2A1 = auto()
    U4E2A2 = auto()
    P4E1A2A = auto()
    P4E1A2B = auto()
    P4E2A1A = auto()
    P4E2A2A = auto()
    U4E1A2B1 = auto()
    U4E2A1A1 = auto()
    U4E2A1A2 = auto()
    U4E2A2A1 = auto()
    U4E2A2A2 = auto()
    U4E2A2A1A1 = auto()
    P4E2A2A1A = auto()
    P4E2A2A2A = auto()
    U4EA = auto()
    P4EERR = auto()
    P4E1AERR = auto()
    P4E1A2AERR = auto()
    P4E1A2BERR = auto()
    P4E2AERR = auto()
    P4E2A1AERR = auto()
    P4E2A2AERR = auto()
    P4E2A2A2AERR = auto()
    S1 = auto()
    S2 = auto()
    S3 = auto()
    S4 = auto()
    S5 = auto()
    S6 = auto()
    S7 = auto()
    S8 = auto()
    S9 = auto()
    S10 = auto()
    S11 = auto()
    S12 = auto()
    S13 = auto()
    S14 = auto()
    S15 = auto()
    S16 = auto()
    S17 = auto()
    S18 = auto()
    S19 = auto()
    S20 = auto()
    S21 = auto()
    S22 = auto()
    S23 = auto()
    S24 = auto()
    S25 = auto()
    S26 = auto()
    S27 = auto()
    S28 = auto()
    S29 = auto()
    S30 = auto()
    S31 = auto()
    S32 = auto()
    S33 = auto()
    S34 = auto()
    S35 = auto()
    S36 = auto()
    S37 = auto()
    S38 = auto()
    S39 = auto()
    S40 = auto()
    S41 = auto()
    S42 = auto()
    S43 = auto()
    S44 = auto()
    S45 = auto()
    S46 = auto()
    S47 = auto()
    S48 = auto()
    S49 = auto()
    S50 = auto()
    S51 = auto()
    S52 = auto()
    S53 = auto()
    S54 = auto()
    S55 = auto()
    S56 = auto()
    S57 = auto()
    S58 = auto()
    S59 = auto()
    S60 = auto()
    S61 = auto()
    S62 = auto()
    S63 = auto()
    S64 = auto()
    S65 = auto()
    S66 = auto()
    S67 = auto()
    S68 = auto()
    S69 = auto()
    S70 = auto()
    S71 = auto()
    S72 = auto()
    S73 = auto()
    S74 = auto()
    S75 = auto()
    S76 = auto()
    S77 = auto()
    S78 = auto()
    S79 = auto()
    S80 = auto()
    S81 = auto()
    S82 = auto()
    S83 = auto()
    S84 = auto()
    S85 = auto()
    S86 = auto()
    S87 = auto()
    S88 = auto()
    S89 = auto()
    S90 = auto()
    S91 = auto()
    S92 = auto()
    S93 = auto()
    S94 = auto()
    S95 = auto()
    S96 = auto()
    S97 = auto()
    S98 = auto()
    S99 = auto()
    S100 = auto()

    U1 = auto()
    U2 = auto()
    U3 = auto()
    U4 = auto()
    U5 = auto()
    U6 = auto()
    U7 = auto()
    U8 = auto()
    U9 = auto()
    U10 = auto()
    U11 = auto()
    U12 = auto()
    U13 = auto()
    U14 = auto()
    U15 = auto()
    U16 = auto()
    U17 = auto()
    U18 = auto()
    U19 = auto()
    U20 = auto()
    U21 = auto()
    U22 = auto()
    U23 = auto()
    U24 = auto()
    U25 = auto()
    U26 = auto()
    U27 = auto()
    U28 = auto()
    U29 = auto()
    U30 = auto()
    U31 = auto()
    U32 = auto()
    U33 = auto()
    U34 = auto()
    U35 = auto()
    U36 = auto()
    U37 = auto()
    U38 = auto()
    U39 = auto()
    U40 = auto()
    U41 = auto()
    U42 = auto()
    U43 = auto()
    U44 = auto()
    U45 = auto()
    U46 = auto()
    U47 = auto()
    U48 = auto()
    U49 = auto()
    U50 = auto()
    U51 = auto()
    U52 = auto()
    U53 = auto()
    U54 = auto()
    U55 = auto()
    U56 = auto()
    U57 = auto()
    U58 = auto()
    U59 = auto()
    U60 = auto()
    U61 = auto()
    U62 = auto()
    U63 = auto()
    U64 = auto()
    U65 = auto()
    U66 = auto()
    U67 = auto()
    U68 = auto()
    U69 = auto()
    U70 = auto()
    U71 = auto()
    U72 = auto()
    U73 = auto()
    U74 = auto()
    U75 = auto()
    U76 = auto()
    U77 = auto()
    U78 = auto()
    U79 = auto()
    U80 = auto()
    U81 = auto()
    U82 = auto()
    U83 = auto()
    U84 = auto()
    U85 = auto()
    U86 = auto()
    U87 = auto()
    U88 = auto()
    U89 = auto()
    U90 = auto()
    U91 = auto()
    U92 = auto()
    U93 = auto()
    U94 = auto()
    U95 = auto()
    U96 = auto()
    U97 = auto()
    U98 = auto()
    U99 = auto()
    U100 = auto()

    name = auto()
    name_prompt = auto()
    name_answer = auto()
    name_reponse = auto()

    First_positive_answer = auto()
    First_positive_end = auto()
    First_positive_reply = auto()
    First_positive_ending = auto()
    First_positive_alone = auto()
    First_positive_end2 = auto()
    First_positive_ending2 = auto()

    # Yuewu Zhou ######################################################################################################
    # confrontation branch ###################################################################

    # Confrontation prompt
    confrontation_prompt = auto()
    # A: We had an argument/fight
    confrontation_answer = auto()

    # - How did it start?
    confrontation_cause_prompt = auto()

    # - A: Other person / self / don't know (don't know leads to improvement branch)
    confrontation_cause_answer = auto()
    confrontation_cause_self = auto()
    confrontation_cause_other = auto()
    confrontation_cause_dontknow = auto()
    confrontation_cause_error = auto()

    # -- Do you think it was intentional?
    confrontation_intentional_yn = auto()

    # -- Yes / No
    confrontation_intentional_answer = auto()

    # --- Why do you think they said that?
    confrontation_intentional_motive_prompt = auto()

    # --- A: Positive / negative sentiment
    confrontation_intentional_motive_answer = auto()

    # ---- Is it justified to argue because (reason) ?
    confrontation_intentional_motive_yn = auto()

    # ---- TO DO: Handle positive vs negative answers

    # -- Is this something that usually happens?
    confrontation_usual_prompt = auto()

    # -- A: Yes / No (Yes leads to advice branch)
    confrontation_usual_yn = auto()

    # --- When was the last time this has happened?
    confrontation_usual_when = auto()

    # --- A: time
    confrontation_usual_when_answer = auto()

    # ---- Have you met with (pronoun) since (time) where you haven't had a (confrontation)?
    confrontation_usual_when_yn = auto()

    confrontation_usual_when1 = auto()
    confrontation_usual_when2 = auto()
    confrontation_usual_when3 = auto()
    confrontation_usual_when_answer1 = auto()
    confrontation_usual_when_answer2 = auto()
    confrontation_usual_when_answer3 = auto()

    # caught self & other branch ###################################################################
    # A: I (catch verb)
    confrontation_self_answer = auto()

    # - How do you think that made them feel?
    confrontation_self_feel_prompt = auto()

    # - A: good / bad
    confrontation_self_feel_answer = auto()

    # -- What do you think could have gone better?
    confrontation_self_improvement_prompt = auto()

    # -- A: verbs (could have) / I don't know or nothing
    confrontation_self_improvement_answer = auto()

    # --- That's sounds great! / Interesting. / I think that would work! Anything else?
    confrontation_self_improvement_yn = auto()

    # --- A: Yes / No (yes returns to confrontation_self_improvement_yn, no transitions to advice)
    confrontation_self_improvement_yn_answer = auto()

    # A: He/She/They (catch verb)
    confrontation_other_answer = auto()

    # - Why do you think they (caught verb) (transitions to intentionality in argument branch)
    confrontation_other_why_prompt = auto()

    # no catch branch ###################################################################
    # A: (no catch)
    confrontation_noCatch_answer = auto()

    # - Was it something that you did?
    confrontation_noCatch_self_prompt = auto()

    # - A: Yes / No (yes leads to self branch)
    confrontation_noCatch_self_answer = auto()

    # -- Was it something that someone else did?
    confrontation_noCatch_other_prompt = auto()

    # -- A: Yes / No (yes leads to other branch branch)
    confrontation_noCatch_other_answer = auto()

    # advice branch ###################################################################
    # Could I offer you some advice?
    confrontation_advice_yn = auto()

    # A: Yes / No (no ends the conversation)
    confrontation_advice_yn_answer = auto()

    # - Would a calmer attitude have helped the situation?
    confrontation_advice_calmer_yn = auto()

    # - A: Yes / No / Maybe (no transitions to other treatment)
    confrontation_advice_calmer_answer = auto()

    # -- Here are some techniques to calm yourself down
    # TO DO: offer advice to calm down

    # usual branch ###################################################################
    # Why do you spend time with this person?
    confrontation_exposure_prompt = auto()

    # because ...
    confrontation_exposure_answer = auto()

    # Will you keep spending time with them?
    confrontation_exposure_why = auto()

    # Yes / No
    confrontation_exposure_yn = auto()

    # Is it maybe a good idea to spend some time away from them and cool off?
    confrontation_exposure_end = auto()

    # treatment branch ###################################################################
    # Still researching treatments, placeholder for advice
    confrontation_treatment_placeholder = auto()

    # Relaxed breathing recommendation
    confrontation_treatment_relaxedbreathing = auto()
    confrontation_treatment_relaxedbreathing_response = auto()
    confrontation_treatment_relaxedbreathing2 = auto()
    confrontation_treatment_relaxedbreathing_response2 = auto()

    # Journaling
    confrontation_treatment_journaling = auto()
    confrontation_treatment_journaling_response = auto()
    confrontation_treatment_journaling2 = auto()
    confrontation_treatment_journaling_response2 = auto()
    # END
    ENDwGREET = auto()
    Incomprehensible_Exit = auto()

    ############# END Confrontation #####################

    corona_prompt = auto()
    corona_prompt1 = auto()

    school_prompt = auto()
    club_prompt = auto()
    club_answer = auto()
    club_enjoy = auto()
    club_enjoy_y = auto()
    club_enjoy_n = auto()
    club_in_club = auto()
    club_in_club_answer = auto()
    club_tell_more_answer = auto()
    club_tell_more = auto()

    # family branch

    family_prompt = auto()
    family_answer = auto()
    family_self = auto()
    family_talk = auto()
    family_talk_answer = auto()
    family_talk_end = auto()
    family_talk_suggestion = auto()
    family_self_pressure = auto()
    family_self_pressure_y = auto()
    family_self_pressure_college = auto()
    family_self_pressure_job = auto()
    family_self_pressure_job_answer = auto()
    family_distortion =auto()

    # work states
    work_prompt = auto()
    work_answer = auto()
    work_enjoy = auto()
    work_enjoy_yn = auto()
    work_enjoy_y = auto()
    work_enjoy_n = auto()
    work_stress_y = auto()
    work_stress_not = auto()

    # affected
    corona_located = auto()
    corona_affected = auto()
    corona_affected_response = auto()
    corona_unknown = auto()
    corona_unknown_response = auto()
    corona_not_us = auto()

    # extension
    corona_activity = auto()
    corona_activity_response = auto()
    corona_activity_response_else = auto()
    corona_not_regularly = auto()
    corona_not_regularly_response = auto()
    corona_not_regularly_help = auto()
    corona_not_regularly_help_response = auto()
    corona_unable_to_advance = auto()
    corona_activity_okay = auto()

    # cognitive distortions
    distortion_intro = auto()
    distortion = auto()
    filtering = auto()
    filtering_ans = auto()
    filtering_yes = auto()
    filtering_no = auto()
    filtering_unsure = auto()
    filtering_treatment = auto()
    filtering_journal_entry = auto()
    polar_intro = auto()
    polar = auto()
    polar_ans = auto()
    polar_yes = auto()
    polar_no = auto()
    polar_unsure = auto()
    polar_treatment = auto()

    want_change = auto()
    no_want_change = auto()
    change = auto()
    change_response = auto()
    change_yes = auto()
    change_focus = auto()

    #new topic
    change_topic = auto()
    start_topic = auto()
    next_topic = auto()


    # ending
    goodbye_statement = auto()
    end = auto()


# TODO: create the ontology as needed
ontology = {
    "ontology": {
        "ontP4C":
            [
                "ontschool",
                "onttired",
                "ontfunclub",
                "ontbadclub",
                "ontsad",
                "ontfamily",
                "ontdunno",
                "ontclubs",
                "ontwork",
                "ontunsure",
                "onthotline",
                "onteating",
                "onteatingtoolittle",
                "onteatingtoomuch",
                "ontangry",
                "ontnewyork",
                "ontnewjersey",
                "ontcalifornia",
                "ontmichigan",
                "ontbadstate",
                "ontokaystate",
                "ontgeorgia",
                "ontcorona",
                "ontstillbusy",
                "ontgoodactivities",
                "ontbadactivities",
                "ontwasteoftime",
                "ontlostjob",
                "ontuserquestion"
            ],
        "ontuserquestion":
            [
                "what should",
                "how should",
                "what do",
                "?",
                "advice"
            ],
        "ontlostjob":
            [
                "lost my job",
                "lost job",
                "unemployed",
                "fired",
                "laid off",
                "layoff",
                "layed off"
            ],
        "ontgeorgia":
            [
                "georgia",
                "ga"
            ],
        "ontstillbusy":
            [
                "still busy",
                "lots of work",
                "stressed",
                "too much work",
                "busy",
                "work"
            ],
        "ontgoodactivities":
            [
                "cook",
                "cooking",
                "cycling",
                "swimming",
                "weightlifting",
                "knitting",
                "draw",
                "drew",
                "drawing",
                "knit",
                "knitted",
                "baking",
                "bakes",
                "made",
                "making",
                "homework",
                "school",
                "schoolwork",
                "family",
                "mom",
                "dad",
                "mother",
                "father",
                "sister",
                "brother",
                "sibling",
                "siblings",
                "creating",
                "create",
                "created",
                "hobby",
                "exploring",
                "explore",
                "explored",
                "reading",
                "book",
                "books",
                "read",
                "growing",
                "grow",
                "grew",
                "building",
                "build",
                "built",
                "yoga",
                "job",
                "organizing",
                "cleaning",
                "organize",
                "organized",
                "clean",
                "cleaned"
                "staying home",
                "social distancing",
                "social distance",
                "quarantine",
                "journaling",
                "scrapbooking",
                "journal",
                "scrapbook",
                "singing",
                "violin",
                "piano",
                "practice",
                "practicing",
                "write",
                "writing",
                "guitar",
                "camera",
                "photography",
                "photos",
                "photographs",
                "editing",
                "dancing",
                "singing",
                "sing",
                "dance",
                "exercising",
                "exercise",
                "running",
                "pilates",
                "run",
                "stretching",
                "stretch",
                "jog",
                "jogging",
                "blogilates",
                "recipes",
                "recipe",
                "novels",
                "novel",
                "start",
                "starting",
                "started"
            ],
        "ontbadactivities":
            [
                "stressing",
                "worrying",
                "money",
                "financial",
                "finances",
                "lost my job",
                "lost job",
                "unemployed,",
                "crying",
                "cry",
                "cried",
                "drinking",
                "sad",
                "depressed",
                "depression",
                "shock",
                "shocked",
                "news",
                "unmotivated",
                "checking",
                "refreshing",
                "videogames",
                "video games",
                "gaming",
                "games"
            ],
        "ontwasteoftime":
            [
                "animalcrossings",
                "animal crossings",
                "animal crossing",
                "animalcrossing",
                "netflix",
                "movies",
                "tv",
                "television",
                "hulu",
                "gaming",
                "games",
                "nothing",
                "blanking out",
                "instagram",
                "scrolling",
                "snapchat",
                "snapchatting",
                "phone",
                "bed",
                "sleeping",
                "social media",
                "tik tok",
                "memes",
                "youtube",
                "facebook",
                "scrolling",
                "napping",
                "napped",
                "naps",
                "slept",
                "sleep"
            ],
        "ontcorona":
            [
                "corona",
                "coronavirus",
                "the virus",
                "virus",
                "covid",
                "covid-19"
            ],
        "ontnewjersey":
            [
                "new jersey",
                "nj",
                "garden"
            ],
        "ontcalifornia":
            [
                "california",
                "cali"
            ],
        "ontmichigan":
            [
                "michigan",
                "mich"
            ],
        "ontbadstate":
            [
                "louisiana",
                "la",
                "pennsylvania",
                "pa",
                "florida",
                "massachusetts",
                "ma",
                "illinois",
                "georgia",
                "ga",
                "texas",
                "washington",
                "connecticut",
                "indiana",
                "maryland",
                "md",
                "colorado",
                "ohio",
                "tennessee",
                "virginia",
                "north carolina",
                "nc",
                "missouri",
                "arizona",
                "wisconsin",
                "south carolina",
                "sc",
                "alabama",
                "nevada",
                "mississippi",
                "utah",
                "oklahoma",
                "district of columbia",
                "washington dc",
                "dc",
                "kentucky",
                "rhode island",
                "ri",
                "idaho",
                "oregon",
                "minnesota",
                "iowa",
                "arkansas",
                "ar",
                "kansas"
            ],
        "ontokaystate":
            [
                "delaware",
                "new mexico",
                "nm",
                "new hampshire",
                "nh",
                "puerto rico",
                "pr",
                "vermont",
                "vm",
                "maine",
                "nebraska",
                "west virginia",
                "wv",
                "hawaii",
                "south dakota",
                "sd"
                "montana",
                "guam",
                "north dakota",
                "wyoming",
                "alaska",
                "ak",
                "virgin islands",
                "northern mariana islands",
            ],
        "ontnewyork":
            [
                "new york",
                "nyc"
            ],
        "ontangry":
            [
                "angry",
                "mad",
                "terrifying",
                "anger"
            ],
        "onteating":
            [
                "eat",
                "eating",
                "feasting",
                "feast",
                "food",
                "nutrition",
                "vitamins",
                "calorie",
                "calories"
                "hungry",
                "binge",
                "binge-eating"
            ],
        "onteatingtoolittle":
            [
                "little",
                "enough",
                "hungry",
                "malnourished",
                "nourished",
                "small",
                "skinny",
                "wee",
                "bite-sized",
                "bitesized",
                "mini",
                "tiny"
            ],
        "onteatingtoomuch":
            [
                "lot",
                "indulge",
                "binge",
                "binging",
                "binge-eating",
                "too",
                "much",
                "bad",
                "overeat",
                "overeating",
                "over-eating",
                "feasting",
                "feast"
            ],
        "onthotline":
            [
                "die",
                "killed",
                "dead",
                "murdered",
                "committed",
                "self-harm",
                "cut",
                "cutting",
                "kill",
                "murder",
                "commit",
                "suicide"
            ],
        "ontunsure":
            [
                "unsure",
                "not sure",
                "dunno",
                "uncertain",
                "not",
                "idk",
                "don't",
                "know",
                "don't know",
                "no idea",
                "confused",
                "confuse"
            ],
        "ontwork":
            [
                "work",
                # "job",
                "money",
                "pay",
                "income",
                "Income",
                "money",
                "cash",
                "paycheck",
                "bills"
            ],
        "ontclubs":
            [
                "club",
                "Club",
                "sport",
                "Sport",
                "team",
                "Team",
                "group",
                "Group",
                "extracurricular",
                "Extracurricular",
                "activity",
                "Activity",
            ],
        "ontfamily":
            [
                "family",
                "parent",
                "sister",
                "brother",
                "kid",
                "child",
                "sibling",
                "cousin",
                "dad",
                "mom",
                "father",
                "mother",
                "parent",
                "parents",
                "cousin",
                "uncle",
                "nephew",
                "aunt",
                "grandparents",
                "grandma",
                "grandpa",
                "grandmother",
                "grandfather",
                "greatgrandfather",
                "maternal",
                "removed"
            ],
        "ontsad":
            [
                "sad",
                "down",
                "unhappy",
                "depressed",
                "depressing",
                "lost",
                "purposeless"
                "blue",
                "dumps",
                "gross",
                "bad",
                "sorrow",
                "sorrowful",
                "regretful",
                "downcast",
                "heavy",
                "miserable",
                "gloom",
                "gloomy",
                "low-spirited",
                "broken-hearted",
                "broken",
                "low",
                "wretched",
                "desolate",
                "crestfallen",
                "mournful",
                "doleful",
                "mourn",
                "mourning",
                "despondent",
                "out of sorts",
                "dejected",
                "awful",
                "inconsolable",
                "falling",
                "apart",
                "broken",
                "fell"
            ],
        "ontbadclub":
            [
                "resume",
                "looks",
                "appears",
                "not",
                "dunno",
                "don't",
                "Dunno",
                "no idea",
                "don't know",
                "not sure",
                "unsure",
                "idk",
                "Resume",
                "Idk"
            ],
        "ontfunclub":
            [
                "fun",
                "enjoy",
                "destress",
                "relaxing",
                "entertaining",
                "socializing",
                "friends",
                "entertain",
                "relax",
                "people",
                "social",
                "friend",
                "Fun",
                "great",
                "calming",
                "calm",
                "invigorate",
                "invigorating",
                "chill",
                "laid back",
                "vibe",
                "amusing",
                "amuse",
                "break",
                "like"
            ],
        "onttired":
            [
                "hours",
                "shifts",
                "shift",
                "tired",
                "fatigue",
                "fatigued",
                "sleeping",
                "exhausted",
                "sleep",
                "too",
                "exhaust",
                "worn",
                "overtired",
                "weary",
                "sleepy",
                "drowsy",
                "wearied",
                "sapped",
                "dog-tired",
                "spent",
                "drained",
                "debilitated",
                "prostrate",
                "enervated",
                "enervate",
                "jaded",
                "dead",
                "deadbeat",
                "shattered",
                "burnt",
                "knackered",
                "pooped"
            ],
        "ontschool":
            [
                "grades",
                "midterm",
                "final",
                "college",
                "exam",
                "school",
                "class",
                "test",
                "course",
                "balance",
                "balancing"
                "Grades",
                "study",
                "course",
                "studying",
                "professor",
                "teacher",
                "canvas",
                "assignment",
                "assignments"
            ],
        "ontemotion":
            [
                "ontnegative",
                "onpositive",
                "ontneutral",
                "ontunexpected"
            ],
        "ontnegative":
            [
                "anger",
                "disgust",
                "sadness",
                "fear",
                "bad",
                "scared",
                "scare",
                "scary",
                "onttired",
                "ontschool",
                "ontsad",
                "ontfamily",
                "ontdunno",
                "ontwork",
                "ontunsure",
                "lonely",
                "loneliness",
                "alone",
                "isolated",
                "sick",
                "fever",
                "corona",
                "coronavirus",
                "worried",
                "worry",
                "worrying",
                "not",
                "terrible"
            ],
        "ontpositive":
            [
                "happiness",
                "happy",
                "Happy",
                "joy",
                "love",
                "great",
                "euphoria",
                "euphoric",
                "super",
                "best",
                "amazing",
                "amaze",
                "amazed",
                "gold",
                "luck",
                "good",
                "positive",
                "radiated",
                "radiating",
                "delight",
                "delighted",
                "fantastic",
                "ecstatic",
                "generous",
                "loving",
                "grateful",
                "loved"
            ],
        "ontneutral":
            [
                "good",
                "ok",
                "fine",
                "okay",
                "neutral",
                "okay",
                "nothing",
                "meh",
                "don\'t care",
                "dont care",
                "bored",
                "boring",
                "bore"
            ],
        "ontunexpected":
            [
                "fear",
                "surprise",
                "startle",
                "jumped",
                "startled",
                "jump",
                "scare",
                "scared",
                "fright",
                "frightened",
                "terror",
                "terrorized",
                "terrorizing",
                "frightening",
                "panic",
                "panicked",
                "panicking",
                "alarm",
                "alarmed",
                "anxious",
                "anxiety",
                "feared",
                "jumped"
            ],
        "ontperception":
            [
                "control",
                "inability",
                "unable",
                "can't",
                "cant",
                "powerless",
                "lack"
            ],
        "ontaffirm":
            [
                "yes",
                "yea",
                "yeah",
                "yep",
                "mhm",
                "mmhmm",
                "mmhm",
                "mhmm",
                "okay",
                "ok",
                "sure",
                "alright",
                "i know",
                "sure",
                "noted",
                "agree",
                "great",
                "good",
                "understood",
                "understand",
                "proceed",
                "yup"
            ],
        "ontnegate":
            [
                "no",
                "nah",
                "nope",
                "No",
                "NO",
                "Nah",
                "NAH",
                "Nope",
                "NOPE",
                "na",
                "Na",
                "nah",
                "not at all",
                "not really",
                "disagree",
                #"I don't want to"
            ],
        "ontbecause":
            [
                "because",
                "since",
                "thus",
                "hence"
            ],
        ########## confrontation branch ontologies ##############
        "ontconfrontation":
            [
                "argument",
                "fight",
                "dispute",
                "disagreement",
                "physical",
                "yelling",
                "yelled",
                "yell",
                "name-calling",
                "screaming",
                "scream",
                "confront",
                "confronted",
                "confrontation"
            ],
        ### anger ontologies ###
        "ontanger":
            [
                "ontcontrol",
                "ontinability",
                "ontinevitable",
                "ontavoidable",
                "onttried",
                "ontfriend"
            ],
        "ontcontrol":
            [
                "control",
                "controlling",
                "controlled",
                "inflexible"
            ],
        "ontinevitable":
            [
                "inevitable",
                "was"
            ],
        "ontavoidable":
            [
                "avoidable",
                "avoid",
                "ran from",
                "avoided"
            ],
        "onttried":
            [
                "tried",
                "try",
                "trying"
            ],
        "ontfriend":
            [
                "friend",
                "friends"
            ],
        "ontshorttime":
            [
                "yesterday",
                "today",
                "day",
                "days",
                "week",
                "recent",
                "recently"
            ],
        "ontnumber":
            [
                "one",

            ],
        "onttimeperiod":
            [
                "yesterday",
                "today",
                "day",
                "days",
                "week",
                "recent",
                "recently",
                "weeks",
                "month"
            ],
        "ontaffected":
            [
                "china",
                "shanghai",
                "wuhan",
                "beijing",
                "spain",
                "madrid",
                "france",
                "paris",
                "korea",
                "seoul"
            ]
    }
}

knowledge = KnowledgeBase()
knowledge.load_json(ontology)
df = DialogueFlow(State.START, initial_speaker=DialogueFlow.Speaker.SYSTEM, kb=knowledge)

# name
# name_prompt
# name_answer
# name_reponse

#df.add_system_transition(State.START, State.PROMPT, '"Hi, how are you feeling today?"')
df.add_user_transition(State.PROMPT, State.P4D, "[$response=#ONT(onthotline)]")
df.add_system_transition(State.START, State.name, '"Hi, what\'s your name?"')
df.add_user_transition(State.name, State.name_prompt, '[$name=#POS(propn)]')
df.add_system_transition(State.name_prompt, State.PROMPT, '"Hi"$name"how are you feeling?"')
df.set_error_successor(State.PROMPT, State.corona_prompt)
###Angela: I couldn't get the above error successor to work and it always crashes for me after "hi whats your name"

df.add_system_transition(State.change_topic, State.start_topic, '"Then let\'s talk about something else that is bothering you in your life? What is stressing you out these days?"')
df.add_user_transition(State.start_topic, State.ENDwGREET, '[#ONT(ontnegate)]')
df.add_user_transition(State.next_topic, State.First_feeling_negative, '[$negative=#ONT(ontnegative)]')
df.set_error_successor(State.start_topic, State.Incomprehensible_Exit)

# The first user response feeling
df.add_user_transition(State.PROMPT, State.First_feeling_positive, '[$positive=#ONT(ontpositive)]')
df.add_user_transition(State.PROMPT, State.First_feeling_negative, '[$negative=#ONT(ontnegative)]')
df.add_user_transition(State.PROMPT, State.corona_prompt, '[$conju=#ONT(ontcorona)]')
####### Move to anger branch ##########################
df.add_user_transition(State.PROMPT, State.ANGER1, '[$confrontation=#ONT(ontangry)]')
####### Move to confrontation branch ##########################
df.add_user_transition(State.PROMPT, State.confrontation_answer, '[$confrontation=#ONT(ontconfrontation)]')

# Moves to corona branch
df.set_error_successor(State.PROMPT, State.corona_prompt)

# Feeling Positive

df.add_system_transition(State.First_feeling_positive, State.First_positive_prompt, '"That\'s great! Can you explain why?"')
df.add_user_transition(State.First_positive_prompt, State.P4D, "[$response=#ONT(onthotline)]")

### small conversation branch for a positive response
df.add_user_transition(State.First_positive_prompt, State.First_positive_answer, '$thing=[#POS(verb)]')
## randomize response
df.add_user_transition(State.First_positive_prompt, State.corona_prompt, '[$conju=#ONT(ontcorona)]')
df.add_user_transition(State.First_positive_prompt, State.corona_prompt1, '[$conju=#ONT(ontcorona)]')
#! uncomment out above and the intro

###04242020: angela: i commented out the bottom part because it wasn't in my patch and the above paragraph is what i had instead
# above does not catch worried?
### small conversation branch for a positive response
# Need to make lemmatization for the verb
# lemmatizer = WordNetLemmatizer()
# df.add_user_transition(State.First_positive_prompt,State.First_positive_answer,'[$thing=#POS(verb)]')
## randomize response

df.set_error_successor(State.First_positive_prompt, State.First_positive_end)

df.add_system_transition(State.First_positive_answer, State.First_positive_reply, '[!"Did you" $thing "with other people?"]')
df.add_system_transition(State.First_positive_end, State.First_positive_ending, '"Cool, have a good day!"')

df.add_user_transition(State.First_positive_reply, State.ENDwGREET, '[#ONT(ontnegate)]')
df.set_error_successor(State.First_positive_reply, State.First_positive_end2)
df.add_system_transition(State.First_positive_end2, State.First_positive_ending2, '"Right on!"')
df.set_error_successor(State.First_positive_ending2, State.ENDwGREET)

# Feeling Negative

df.add_system_transition(State.First_feeling_negative, State.First_negative_prompt, '[!"What\'s been making you feel"$negative"?"]')

df.add_user_transition(State.First_negative_prompt, State.U45, '[$confrontation=#ONT(ontlostjob)]')
#Not sure what this is supposed to lead from
#df.add_user_transition(State.First_feeling_negative, State.U45, '[$confrontation=#ONT(ontlostjob)]')
df.add_system_transition(State.U45, State.S45, '"I\'m sorry to hear that! These are crazy times. What are you going to do?"')
df.add_user_transition(State.S45, State.P4D, "[$response=#ONT(onthotline)]")
df.add_user_transition(State.S45, State.U46, "#ONT(ontunsure)")
df.add_user_transition(State.S45, State.U48, "#ONT(ontbadactivities)")
df.set_error_successor(State.S45, State.U48)
df.add_system_transition(State.U46, State.S46, '"I know it feels like the end of the world, but at least you have more time to spend with family and friends. Jobs come and go, but people are forever."')
df.add_user_transition(State.S46, State.P4D, "[$response=#ONT(onthotline)]")
df.add_user_transition(State.S46, State.U47, '[$reason=/.*/]')
df.add_system_transition(State.U48, State.S46,  '"I know it feels like the end of the world, but at least you have more time to spend with family and friends. Jobs come and go, but people are forever."')
df.add_system_transition(State.U47, State.S9, '"Well, how are you doing with social distancing?"')
#df.add_user_transition(State.S9, State.P4D, "[$response=#ONT(onthotline)]")

####### Move to confrontation branch ##########################
df.add_user_transition(State.First_negative_prompt, State.confrontation_answer, '[$confrontation=#ONT(ontconfrontation)]')

####### Move to anger branch ##########################
df.add_user_transition(State.First_negative_prompt, State.ANGER1, '[$confrontation=#ONT(ontangry)]')

# Angela transitions
df.add_user_transition(State.First_negative_prompt, State.corona_prompt, '[$conju=#ONT(ontcorona)]')
df.add_user_transition(State.First_negative_prompt, State.school_prompt, '[$response=#ONT(ontschool)]')
df.add_user_transition(State.First_negative_prompt, State.family_prompt, '[$response=#ONT(ontfamily)]')
df.add_user_transition(State.First_negative_prompt, State.work_prompt, '[$response=#ONT(ontwork)]')
# df.add_user_transition(State.First_negative_prompt, State.eating_prompt, "[$response=#ONT(onteating)]")
###04242020: angela: my patch says there was a difference but i can't find anything

# Error state foes to corona
df.set_error_successor(State.First_negative_prompt, State.corona_prompt)

#################################################

### ANGER BRANCH ###

df.add_system_transition(State.ANGER1, State.QUESTION1, '"Is there a person/activity that comes to mind that may cause you anger? "')
df.add_user_transition(State.QUESTION1, State.P4D, "[$response=#ONT(onthotline)]")
df.set_error_successor(State.QUESTION1, State.ANGER2)
df.add_system_transition(State.ANGER2, State.QUESTION2, '"Do you think getting angry was or was not inevitable? "')
df.add_user_transition(State.QUESTION2, State.P4D, "[$response=#ONT(onthotline)]")

# U4 POSSIBLE BRANCHES DEPENDING ON USER RESPONSE

df.add_user_transition(State.QUESTION1, State.PERSON, '[$person=#ONT(ontfamily,ontfriend)]')
df.add_user_transition(State.QUESTION1, State.ACTIVITY, '[$activity=#POS(verb)]')

df.add_user_transition(State.QUESTION2, State.INEVITABLE, '[$inevitable=#ONT(ontinevitable,ontaffirm)]')
df.add_user_transition(State.QUESTION2, State.AVOIDABLE, '[$avoidable=#ONT(ontavoidable,ontnegate)]')
# changed from generic error state
df.set_error_successor(State.QUESTION2, State.INEVDESCRIP)

# S5 TRANSITIONS
df.add_system_transition(State.PERSON, State.IDENTIFYPERSON, '[!"Thank you for telling me about your hard time dealing with "$person". \n Have you tried or resolving this issue directly with "$person"? \n Please feel free to tell me exactly how you went about fixing this relationship if you have already tried."]')
df.set_error_successor(State.IDENTIFYPERSON, State.confrontation_cause_self)

df.add_system_transition(State.ACTIVITY, State.IDENTIFYACTIVITY, '[!"Thank you for telling me about your difficult time engaging with that " $activity ". \n Have you tried talking to your friends or family about this " $activity"? \n Let me know explicitly whether you spoke to either your friends or family."]')
df.set_error_successor(State.IDENTIFYACTIVITY, State.family_self_pressure_y)

df.add_system_transition(State.INEVITABLE, State.INEVDESCRIP, '"Would you say that your anger partly stems from lack of control over your situation?"')
df.add_user_transition(State.INEVDESCRIP, State.P4D, "[$response=#ONT(onthotline)]")
df.add_user_transition(State.INEVDESCRIP, State.confrontation_treatment_relaxedbreathing, '[#ONT(ontaffirm)]')
df.set_error_successor(State.INEVDESCRIP, State.confrontation_treatment_journaling)

df.add_system_transition(State.AVOIDABLE, State.AVOIDDESCRIP, '"Did you feel more inability or control over trying to avoid the situation"')
df.add_user_transition(State.AVOIDDESCRIP, State.P4D, "[$response=#ONT(onthotline)]")
df.set_error_successor(State.AVOIDDESCRIP, State.confrontation_treatment_journaling)

# 4 possible responses
# it identifies a person
# they talk about an an activity
# there is a lack of control (yes/no) mindfulness/journaling
# they could have / could not have avoided situation


### END OF ANGER BRANCH ###


# angela's stuff
####################################################################################

# club_in_club
# club_in_club_answer


# Club activities
df.add_system_transition(State.school_prompt, State.club_prompt, '"Oh man, I feel that. I\'ve been there too. Are you in any clubs by chance?"')
df.add_user_transition(State.club_prompt, State.club_answer, '[$club=#ONT(ontclubs)]')

df.add_user_transition(State.club_prompt, State.club_in_club, '[#ONT(ontaffirm)]')
df.set_error_successor(State.club_prompt, State.club_enjoy_n)

df.add_system_transition(State.club_in_club, State.club_in_club_answer, '"That\'s great, which club are you in?"')
df.add_user_transition(State.club_in_club_answer, State.club_answer, '[$club=#ONT(ontclubs)]')
df.set_error_successor(State.club_in_club_answer, State.club_tell_more)

df.add_system_transition(State.club_tell_more, State.club_tell_more_answer, '"Can you tell me how you feel about your "$club"?"')
df.add_user_transition(State.club_tell_more_answer, State.U15, '[$club=#ONT(ontbadclub)]')
df.add_user_transition(State.club_tell_more_answer, State.U13, '[$club=#ONT(ontfunclub)]')
df.set_error_successor(State.club_tell_more_answer, State.club_answer)

# {#POS(noun),#POS(verb)}

df.add_system_transition(State.club_answer, State.club_enjoy, '"Are you enjoying the "$club" that you\'re in?"')
df.add_user_transition(State.club_enjoy, State.club_enjoy_y, '[#ONT(ontaffirm)]')
df.set_error_successor(State.club_enjoy, State.club_enjoy_n)

df.add_system_transition(State.club_enjoy_y, State.EXIT, '"That\'s nice! I\'m glad you have balance in your life."')

df.add_system_transition(State.club_enjoy_n, State.EXIT,  '"There are plenty of clubs around. Maybe when campuses open again, you can find a club that you enjoy."')

# add further depth if necessary

# family Branch

df.add_system_transition(State.family_prompt, State.family_answer, '"That\'s tough, do you feel like your family places pressure on you?"')
df.add_user_transition(State.family_answer, State.family_self, '[#ONT(ontnegate)]')
df.set_error_successor(State.family_answer, State.family_talk)

df.add_system_transition(State.family_talk, State.family_talk_answer, '"Have you talked to them about this stuff?"')
df.add_user_transition(State.family_talk_answer, State.family_talk_end, '[#ONT(onaffirm)]')
df.set_error_successor(State.family_talk_answer, State.family_talk_suggestion)

# havent talked with family
df.add_system_transition(State.family_talk_suggestion, State.family_distortion,
                         '"I feel like you should talk to them. Start with something small, and work your way through."') ##transition into cognitive distortion
df.add_user_transition(State.family_distortion, State.change_topic, '[#ONT(ontnegate)]')
df.set_error_successor(State.family_distortion, State.distortion_intro)

# already talked with family Even if you are not ready to talk to them we can focus on finding a way for you to prepare to talk to them.
df.add_system_transition(State.family_talk_end, State.distortion_intro, '"Way to go!"') ##transition into cognitive distortion

# pressure on self?
df.add_system_transition(State.family_self, State.family_self_pressure, '"Do you place pressure on yourself?"')  # ->activities
df.add_user_transition(State.family_self_pressure, State.family_talk_end, '[#ONT(ontnegate)]')
df.set_error_successor(State.family_self_pressure, State.family_self_pressure_y)

df.add_system_transition(State.family_self_pressure_y, State.family_self_pressure_college, '"It\'s not good to pressure yourself too much. Are you in college by any chance?"')
df.add_user_transition(State.family_self_pressure_college, State.school_prompt, '[#ONT(ontaffirm)]')
df.set_error_successor(State.family_self_pressure_college, State.family_self_pressure_job)

df.add_system_transition(State.family_self_pressure_job, State.family_self_pressure_job_answer, '"Do you have a job?"')
df.add_user_transition(State.family_self_pressure_job_answer, State.work_prompt, '[#ONT(ontaffirm)]')
df.set_error_successor(State.family_self_pressure_job_answer, State.A111) ## State A111 does not exist

# job branch
df.add_system_transition(State.work_prompt, State.work_answer, '"Where do you work?"')
df.set_error_successor(State.work_answer, State.work_enjoy)

df.add_system_transition(State.work_enjoy, State.work_enjoy_yn, '"That\'s great that you are still employed! Do you enjoy your job?"')
df.add_user_transition(State.work_enjoy_yn, State.work_enjoy_y, '[#ONT(ontaffirm)]')
df.set_error_successor(State.work_enjoy_yn, State.work_enjoy_n)

df.add_system_transition(State.work_enjoy_y, State.EXIT, '"I\'m glad you enjoy it!"')

df.add_system_transition(State.work_enjoy_n, State.work_stress_y, "Is it stressful?")
df.add_user_transition(State.work_stress_y, State.work_stress_not, '[#ONT(ontnegate)]')
# recommends mindfulness
df.set_error_successor(State.work_stress_y, State.confrontation_treatment_relaxedbreathing)

df.add_system_transition(State.work_stress_not, State.EXIT, '"It\'s awesome that you found a job that isn\'t stressful. More power to ya!"')


########### Confrontation Branch (Yuewu) ################################
df.add_system_transition(State.confrontation_answer, State.confrontation_cause_prompt, '"That would make me feel"$negative"too. How did the"$confrontation"start?"')
df.add_user_transition(State.confrontation_cause_prompt, State.P4D, "[$response=#ONT(onthotline)]")
df.set_error_successor(State.confrontation_answer, State.confrontation_cause_self)
# -> argument branchag

df.add_system_transition(State.confrontation_cause_error, State.confrontation_noCatch_self_prompt, '"Do you feel like the"$confrontation"started with something you did?"')
df.add_user_transition(State.confrontation_noCatch_self_prompt, State.P4D, "[$response=#ONT(onthotline)]")
df.add_user_transition(State.confrontation_noCatch_self_prompt, State.confrontation_cause_self, '[#ONT(ontaffirm)]')
df.set_error_successor(State.confrontation_noCatch_self_prompt, State.confrontation_cause_self)

##### argument branch
df.add_user_transition(State.confrontation_cause_prompt, State.confrontation_cause_self, '[{I,i}]')
df.add_system_transition(State.confrontation_cause_self, State.confrontation_usual_prompt,'"Is this something that has happened before?"')
# -> usual

df.add_user_transition(State.confrontation_cause_prompt, State.confrontation_cause_other, '[$person=#POS(propn)]')
df.add_system_transition(State.confrontation_cause_other, State.confrontation_intentional_yn, '"Do you think it was intentional?"')
# -> argument motive

df.set_error_successor(State.confrontation_cause_prompt, State.confrontation_cause_self)
# -> usual


##### argument motive
df.add_user_transition(State.confrontation_intentional_yn, State.confrontation_intentional_answer, '[#ONT(ontaffirm)]')
# -> exposure
df.set_error_successor(State.confrontation_intentional_yn, State.confrontation_intentional_answer)
# -> advice

df.add_system_transition(State.confrontation_intentional_answer, State.confrontation_intentional_motive_prompt,'"Why do you think they did that?"')
df.add_user_transition(State.confrontation_intentional_motive_prompt, State.confrontation_intentional_motive_answer, '[{because,Because} $reason=/.*/]')
df.set_error_successor(State.confrontation_intentional_motive_prompt, State.confrontation_cause_self)
# -> usual

df.add_system_transition(State.confrontation_intentional_motive_answer, State.confrontation_intentional_motive_yn, '"Do you think it\'s good to argue because"$reason"?"')
df.add_user_transition(State.confrontation_intentional_motive_yn, State.confrontation_exposure_prompt, '[#ONT(ontaffirm)]')
# -> usual
df.set_error_successor(State.confrontation_intentional_motive_yn, State.confrontation_treatment_journaling)
# -> advice


##### usual
df.add_user_transition(State.confrontation_usual_prompt, State.confrontation_usual_yn, '[#ONT(ontaffirm)]')
###04242020: Angela: Sarah mentioned in her notes that confrontation_usual_prompt only expects an affirmative answer and it has no unexpected input handling
df.add_system_transition(State.confrontation_usual_yn, State.confrontation_usual_when, '"When was the last time this happened?"')

df.add_user_transition(State.confrontation_usual_when, State.confrontation_usual_when1, '$number=#NER(NUM)')
df.add_user_transition(State.confrontation_usual_when, State.confrontation_advice_yn, '[never]')
df.set_error_successor(State.confrontation_usual_when, State.confrontation_usual_when_answer)

# TODO: Fix this transition

df.add_system_transition(State.confrontation_usual_when1, State.confrontation_usual_when_answer1, '"$number"')
df.add_user_transition(State.confrontation_usual_when_answer1, State.confrontation_usual_when2, '[#ONT(ontaffirm)]')
df.set_error_successor(State.confrontation_usual_when_answer1, State.confrontation_usual_when_answer)

df.add_system_transition(State.confrontation_usual_when2, State.confrontation_usual_when_answer2, '"Ah, gotcha. Any chance of reconciliation?"')
df.add_user_transition(State.confrontation_usual_when_answer2, State.confrontation_usual_when3, '[#ONT(ontaffirm)]')
df.set_error_successor(State.confrontation_usual_when_answer2, State.confrontation_advice_calmer_answer)

df.add_system_transition(State.confrontation_usual_when3, State.confrontation_usual_when_answer3, '"That\'s great to hear. People have their"$confrontation"s, but it\'s always good to make up afterwards."')
df.set_error_successor(State.confrontation_usual_when_answer3, State.ENDwGREET)

# df.add_user_transition(State.confrontation_usual_when,State.confrontation_usual_when_answer,"$time=#NER(date)")
# -> exposure (because no time catch)
df.add_system_transition(State.confrontation_usual_when_answer, State.confrontation_usual_when_yn, '"Have you had a"$confrontation"?"often?"')
###04242020: Angela: error parsing above, as said in Sarah's notes

df.add_user_transition(State.confrontation_usual_when_yn, State.confrontation_advice_yn, '[#ONT(ontaffirm)]')
# -> advice
df.set_error_successor(State.confrontation_usual_when_yn, State.confrontation_exposure_end)
# -> exposure

##### advice
df.add_system_transition(State.confrontation_advice_yn, State.confrontation_advice_yn_answer, '"Could I offer you some advice?"')
df.add_user_transition(State.confrontation_advice_yn_answer, State.confrontation_advice_calmer_yn, '[#ONT(ontaffirm)]')
df.set_error_successor(State.confrontation_advice_yn_answer, State.ENDwGREET)
# -> END
df.add_system_transition(State.confrontation_advice_calmer_yn, State.confrontation_advice_calmer_answer,'"Okay, do you think a calmer attitude would have mitigated the"$confrontation"?"')
df.set_error_successor(State.confrontation_advice_calmer_answer, State.confrontation_treatment_relaxedbreathing)

##### exposure
df.add_system_transition(State.confrontation_exposure_prompt, State.confrontation_exposure_answer,'"Why do you spend time with them?"')
df.add_user_transition(State.confrontation_exposure_answer, State.confrontation_exposure_why,'[{because,Because} $reason=/.*/]')
df.set_error_successor(State.confrontation_exposure_answer, State.confrontation_exposure_why)

df.add_system_transition(State.confrontation_exposure_why, State.confrontation_exposure_yn, '"Do you think you\'ll talk with them again soon?"')

df.add_user_transition(State.confrontation_exposure_yn, State.confrontation_treatment_relaxedbreathing,"#ONT(ontaffirm)")  ### Relaxed breathing
df.add_user_transition(State.confrontation_exposure_yn, State.confrontation_exposure_end, '[#ONT(ontnegate)]')
# -> advice
df.set_error_successor(State.confrontation_exposure_yn, State.confrontation_exposure_end)

df.add_system_transition(State.confrontation_exposure_end, State.END, '"I think it\'s best to spend some time cooling off after a"$confrontation"."')

##### Treatment branch
### Relaxed breathing
df.add_system_transition(State.confrontation_treatment_relaxedbreathing, State.confrontation_treatment_relaxedbreathing_response, '"I want to recommend an exercise using mindfulness. Is that something you\'d be interested in? "')
df.add_user_transition(State.confrontation_treatment_relaxedbreathing_response, State.confrontation_treatment_relaxedbreathing2, "#ONT(ontaffirm)")
df.set_error_successor(State.confrontation_treatment_relaxedbreathing_response, State.ENDwGREET)
df.add_system_transition(State.confrontation_treatment_relaxedbreathing2,
                         State.confrontation_treatment_relaxedbreathing_response2,
                         '"Mindfulness is the practice of taking different perspectives on things, often with breathing exercises and meditation. '
                         'Mindfulness can teach: Paying attention to what is going on around you. Participating without being self-conscious, '
                         'Taking a non-judgmental stance, Focusing on the moment without distraction from other ideas or events, '
                         'and Doing what works rather than second-guessing yourself."')
df.set_error_successor(State.confrontation_treatment_relaxedbreathing_response2, State.ENDwGREET)
### Journaling
df.add_system_transition(State.confrontation_treatment_journaling, State.confrontation_treatment_relaxedbreathing_response, '"Based on your responses, I would recommend is journaling. Is that something you\'d be interested in? "')
df.add_user_transition(State.confrontation_treatment_journaling_response, State.confrontation_treatment_journaling2, '[#ONT(ontaffirm)]')
df.set_error_successor(State.confrontation_treatment_journaling_response, State.ENDwGREET)
df.add_system_transition(State.confrontation_treatment_journaling2, State.confrontation_treatment_journaling_response2,
                         '"Journaling is the practice of writing for therapeutic purposes. Often done with specific exercises, '
                         'journaling is helpful in identifying and processing stressful or difficult events in a persons life."')
# -> END

# ENDwGREET
df.add_system_transition(State.ENDwGREET, State.EXIT, '"Alright, have a good day!"') ##cognitive distortion
#############ANGELA
df.add_system_transition(State.corona_prompt, State.S2, '"The world is pretty crazy now isn\'t it? Are you in the US?"')
df.add_system_transition(State.corona_prompt1, State.S2, '"The pandemic has changed our lives, hasn\'t it? Are you in the US?"')
df.add_user_transition(State.S2, State.U7, '[#ONT(ontaffirm)]')
df.add_user_transition(State.S2, State.U8, '[#ONT(ontnegate)]')
df.add_system_transition(State.U7, State.S1, '"Which state are you in right now?"')
df.add_user_transition(State.S1, State.U1, '[#ONT(ontnewjersey)]')
df.add_user_transition(State.S1, State.U2, '[#ONT(ontnewyork)]')
df.add_user_transition(State.S1, State.U3, '[#ONT(ontcalifornia)]')
df.add_user_transition(State.S1, State.U4, '[#ONT(ontmichigan)]')
df.add_user_transition(State.S1, State.U5, '[#ONT(ontbadstate)]')
df.add_user_transition(State.S1, State.U6, '[#ONT(ontokaystate)]')
df.add_user_transition(State.S1, State.U42, "#ONT(ontgeorgia)")
df.set_error_successor(State.S1, State.U8)
df.set_error_successor(State.S2, State.U8)
##### Error handle

df.add_system_transition(State.corona_not_us, State.corona_located, '"Oh, where are you currently located?"')
df.add_user_transition(State.corona_located, State.corona_affected, '[$country=#ONT(ontaffected)]')
df.add_user_transition(State.corona_located, State.corona_unknown, '[$location=#POS(propn)]')
df.set_error_successor(State.corona_located, State.U8)

df.add_system_transition(State.corona_affected, State.corona_affected_response, '"I hear that cases are pretty serious in"$country", how are you doing?"')
df.add_user_transition(State.corona_affected_response, State.U9, '[#ONT(ontpositive)]')
df.add_user_transition(State.corona_affected_response, State.U10, '[#ONT(ontnegative)]')

df.add_system_transition(State.corona_unknown, State.corona_unknown_response, '"I haven\'t heard much about"$location", can you tell me more about the situation there?"')
df.add_user_transition(State.corona_unknown_response, State.U9, "#ONT(ontpositive)")
df.add_user_transition(State.corona_unknown_response, State.U10, "#ONT(ontnegative)")
df.set_error_successor(State.corona_unknown_response, State.U8)

#####

# df.add_system_transition(State.U6, State.S3, '"Oh, I heard that corona not too bad there! How are you doing with social distancing?"')
df.add_system_transition(State.U42, State.S40, '"I\'m in Georgia too! Don\'t you think that the governor lifted the stay-at-home order too early?"')
df.add_user_transition(State.S40, State.U80, "#ONT(ontaffirm)")
df.add_user_transition(State.S40, State.U81, "#ONT(ontnegate)")
df.add_user_transition(State.S40, State.U82, "#ONT(ontunsure)")
df.set_error_successor(State.S40, State.S82)
df.add_system_transition(State.U80, State.S80, '"President Trump disagreed with our Governor, too."')
df.add_system_transition(State.U81, State.S81, '"Oh, well, I\'m sure there are people who agree with you."')
df.add_system_transition(State.U82, State.S82, '"Well, I definitely think he did. President Trump does, too."')
df.add_user_transition(State.S80, State.U41, '[$reason=/.*/]')
df.add_user_transition(State.S81, State.U41, '[$reason=/.*/]')
df.add_user_transition(State.S82, State.U41, '[$reason=/.*/]')
df.add_system_transition(State.U41, State.S9, '"Well, how are you doing with social distancing?"')
df.add_system_transition(State.U6, State.S3,  '"Oh, I heard that corona is not too bad there! My friend Alex lives there. What do you think?"')
df.add_user_transition(State.S3, State.U83, "#ONT(ontunsure)")
df.add_user_transition(State.S3, State.U84, "#ONT(ontaffirm)")
df.add_user_transition(State.S3, State.U85, "#ONT(ontnegate)")
df.add_user_transition(State.S3, State.U86, "#ONT(ontnegative)")
df.set_error_successor(State.S3, State.S9)
df.add_system_transition(State.U83, State.S83, '"I guess you wouldn\t know, being quarantined and all."')
df.add_system_transition(State.U84, State.S84, '"I\'m glad you seem relatively calm."')
df.add_system_transition(State.U85, State.S85, '"Yikes, I hope you\'re staying calm!"')
df.add_system_transition(State.U86, State.S85, '"Yikes, I hope you\'re staying calm!"')
df.add_user_transition(State.S83, State.U87, '[$reason=/.*/]')
df.add_user_transition(State.S84, State.U87, '[$reason=/.*/]')
df.add_user_transition(State.S85, State.U87, '[$reason=/.*/]')
df.add_user_transition(State.S86, State.U87, '[$reason=/.*/]')
df.add_system_transition(State.U87, State.S9, '"Well, how are you doing with social distancing?"')
df.add_system_transition(State.U5, State.S4,  '"Yikes, I hear corona is spreading very quickly there. How are you doing with social distancing?"')
df.add_user_transition(State.S4, State.P4D, "[$response=#ONT(onthotline)]")
df.add_system_transition(State.U1, State.S70, '"Yikes, NJ is second only to New York in number of cases! Are you in Bergen by any chance?"')
df.add_user_transition(State.S70, State.U70, "#ONT(ontaffirm)")
df.add_user_transition(State.S70, State.U71, "#ONT(ontunsure)")
df.add_user_transition(State.S70, State.U72, "#ONT(ontnegate)")
df.add_system_transition(State.U70, State.S71, '"Oh no! I\'ve heard that Bergen has the highest number of cases in New Jersey."')
df.add_system_transition(State.U71, State.S72, '"Well, I hope you aren\'t. Bergen has the highest number of cases in New Jersey."')
df.add_system_transition(State.U72, State.S73, '"That\'s good. My parents live there and they are scared as Bergen is highly infected."')
df.set_error_successor(State.S70, State.U16)
#does above work?
df.add_user_transition(State.S71, State.U73, '[$reason=/.*/]')
df.add_user_transition(State.S72, State.U74, '[$reason=/.*/]')
df.add_user_transition(State.S73, State.U74, '[$reason=/.*/]')
df.add_system_transition(State.U73, State.S5, '"How are you doing with social distancing?"')
df.add_system_transition(State.U74, State.S5, '"How are you doing with social distancing?"')
df.add_system_transition(State.U75, State.S5, '"How are you doing with social distancing?"')
df.add_user_transition(State.S5, State.P4D, "[$response=#ONT(onthotline)]")

####
df.add_system_transition(State.U2, State.S6, '"Yikes, NYC is very scary right now. Do you live with others?"')
df.add_user_transition(State.S6, State.U76, "#ONT(ontaffirm)")
df.add_user_transition(State.S6, State.U77, "#ONT(ontunsure)")
df.add_user_transition(State.S6, State.U78, "#ONT(ontnegate)")
df.add_system_transition(State.U76, State.S74, '"Well, I hope all of you stay cautious as it will be very bad if one of you gets infected."')
df.add_system_transition(State.U77, State.S75, '"Well, if you do, I hope all of you stay cautious as it will be very bad if one of you gets infected"')
df.add_system_transition(State.U78, State.S76, '"That\'s good. You won\'t have to worry about a housemate getting infected."')
df.set_error_successor(State.S6, State.U16)
df.add_user_transition(State.S74, State.U88, '[$reason=/.*/]')
df.add_user_transition(State.S75, State.U89, '[$reason=/.*/]')
df.add_user_transition(State.S76, State.U90, '[$reason=/.*/]')
df.add_system_transition(State.U88, State.S5, '"How are you doing with social distancing?"')
df.add_system_transition(State.U89, State.S5, '"How are you doing with social distancing?"')
df.add_system_transition(State.U90, State.S5, '"How are you doing with social distancing?"')
####
df.add_system_transition(State.U3, State.S7,  '"Not as bad as New York, but it seems to be spreading in California as well. How are you doing with social distancing?"')
df.add_system_transition(State.U4, State.S8,  '"Yeah, I\'m personally surprised Michigan is up there with NY and NJ in coronavirus cases! How are you doing with social distancing?"')
df.add_system_transition(State.U8, State.S9, '"Well, how are you doing with social distancing?"')
df.add_user_transition(State.S9, State.P4D, "[$response=#ONT(onthotline)]")
df.add_user_transition(State.S3, State.U9, '[$checkin=#ONT(ontpositive,ontneutral)]')
df.add_user_transition(State.S3, State.U10, '[$checkin=#ONT(ontnegative)]')
df.add_user_transition(State.S4, State.U9, '[$checkin=#ONT(ontpositive,ontneutral)]')
df.add_user_transition(State.S4, State.U10, '[$checkin=#ONT(ontnegative)]')
df.add_user_transition(State.S8, State.U9, '[$checkin=#ONT(ontpositive,ontneutral)]')
df.add_user_transition(State.S8, State.U10, '[$checkin=#ONT(ontnegative)]')
df.add_user_transition(State.S7, State.U9, '[$checkin=#ONT(ontpositive,ontneutral)]')
df.add_user_transition(State.S7, State.U10, '[$checkin=#ONT(ontnegative)]')
df.add_user_transition(State.S6, State.U9, '[$checkin=#ONT(ontpositive,ontneutral)]')
df.add_user_transition(State.S6, State.U10, '[$checkin=#ONT(ontnegative)]')
df.add_user_transition(State.S5, State.U9, '[$checkin=#ONT(ontpositive,ontneutral)]')
df.add_user_transition(State.S5, State.U10, '[$checkin=#ONT(ontnegative)]')
df.add_user_transition(State.S9, State.U9, '[$checkin=#ONT(ontpositive,ontneutral)]')
df.add_user_transition(State.S9, State.U10, '[$checkin=#ONT(ontnegative)]')

# S3 - S9
df.set_error_successor(State.S3, State.U16)
df.set_error_successor(State.S4, State.U16)
df.set_error_successor(State.S5, State.U16)
df.set_error_successor(State.S6, State.U16)
df.set_error_successor(State.S7, State.U16)
df.set_error_successor(State.S8, State.U16)
df.set_error_successor(State.S9, State.U16)

df.add_system_transition(State.U9, State.S10, '"Well I\'m glad you\'re not suffering! What do you spend your free time doing?"')
df.add_system_transition(State.U10, State.S11, '"Oh no! I\'m sorry that the current events have affected your mental health. What have you been doing to keep busy?"')
df.add_user_transition(State.S11, State.P4D, "[$response=#ONT(onthotline)]")
df.add_user_transition(State.S10, State.U12, '[$checkin=#ONT(ontstillbusy)]')
df.add_user_transition(State.S10, State.U13, '[$checkin=#ONT(ontgoodactivities)]')
df.add_user_transition(State.S10, State.U14, '[$checkin=#ONT(ontbadactivities)]')
df.add_user_transition(State.S10, State.U15, '[$checkin=#ONT(ontwasteoftime)]')
df.set_error_successor(State.S10, State.U16)
df.set_error_successor(State.S11, State.U16)

# We're skipping back to therapy section S17 / S18 (comments can be deleted)
# error_state_activity
# therapy_lead_in
# therapy_lead_in_response
# df.set_error_successor(State.S10,State.error_state_activity)
# df.add_system_transition(State.error_state_activity,State.therapy_lead_in_response, '"How are you feeling right now?"')
# df.add_user_transition()

# States S11
df.add_user_transition(State.S11, State.U12, '[$checkin=#ONT(ontstillbusy)]')
df.add_user_transition(State.S11, State.U13, '[$checkin=#ONT(ontgoodactivities)]')
df.add_user_transition(State.S11, State.U14, '[$checkin=#ONT(ontbadactivities)]')
df.add_user_transition(State.S11, State.U15, '[$checkin=#ONT(ontwasteoftime)]')
df.set_error_successor(State.S11, State.U16)

# States S12
df.add_system_transition(State.U12, State.S12, '"Well, it\'s good that you\'re still busy but make sure you make time for yourself! Do you do any activities to relax?"')
df.add_user_transition(State.S12, State.U13, '[$checkin=#ONT(ontgoodactivities)]')
df.add_user_transition(State.S12, State.U15, '[$checkin=#ONT(ontwasteoftime)]')
df.add_user_transition(State.S12, State.U16, '[$checkin=#ONT(ontaffirm)]')
df.add_user_transition(State.S12, State.U17, '[$checkin=#ONT(ontnegate)]')
df.set_error_successor(State.S12, State.U13)

# #activity verb catch
df.add_system_transition(State.corona_activity, State.corona_activity_response, '"That\'s great, do you do"$action"regularly?"')
df.add_user_transition(State.corona_activity_response, State.U13, '[#ONT(ontaffirm)]')
df.add_user_transition(State.corona_activity_response, State.corona_not_regularly, '[#ONT(ontnegate)]')
df.set_error_successor(State.corona_activity_response, State.U30)

df.add_system_transition(State.corona_not_regularly, State.corona_not_regularly_response, '"Hmmm... is it something that you would like to do more regularly?"')
df.add_user_transition(State.corona_not_regularly_response, State.corona_not_regularly_help, '[$checkin=#ONT(ontaffirm)]')
df.set_error_successor(State.corona_not_regularly_response, State.corona_unable_to_advance)

df.add_system_transition(State.corona_not_regularly_help, State.corona_not_regularly_help_response, '"Would you like some help keeping a more consistent schedule?"')
df.add_user_transition(State.corona_not_regularly_help_response, State.confrontation_treatment_journaling, '[$checkin=#ONT(ontaffirm)]')
df.set_error_successor(State.corona_not_regularly_help_response, State.corona_activity_okay)

df.add_system_transition(State.corona_activity_okay, State.corona_activity_response_else, '"That\'s alright, is there anything else you would like to talk about, maybe school or work or something else?"') #Working here
df.add_user_transition(State.corona_activity_response_else, State.school_prompt, '[$response=#ONT(ontschool)]')
df.add_user_transition(State.corona_activity_response_else, State.family_prompt, '[$response=#ONT(ontfamily)]')
df.add_user_transition(State.corona_activity_response_else, State.work_prompt, '[$response=#ONT(ontwork)]')
df.set_error_successor(State.corona_activity_response_else, State.corona_unable_to_advance)

df.add_system_transition(State.corona_unable_to_advance, State.EXIT, '"Sorry, I\'m not quite advanced enough to handle that yet. Come back a bit later and see if I\'ve learned anything new."')

# States S13
df.add_system_transition(State.U16, State.S13, '"Hmm. That\'s interesting. What other things have you been doing?"')
df.add_user_transition(State.S13, State.U13, '[$checkin=#ONT(ontgoodactivities)]')
df.add_user_transition(State.S13, State.U14, '[$checkin=#ONT(ontbadactivities)]')
df.add_user_transition(State.S13, State.U15, '[$checkin=#ONT(ontwasteoftime)]')
df.set_error_successor(State.S13, State.U30)

# States S14
df.add_system_transition(State.U17, State.S14, '"That\'s not good! I know that life feels like it\'s at a standstill right now, but you should still use your time wisely. Do you have any ideas for activities you could do?"')
df.add_user_transition(State.S14, State.P4D, "[$response=#ONT(onthotline)]")
df.add_user_transition(State.S14, State.U13, '[$checkin=#ONT(ontgoodactivities)]')
df.add_user_transition(State.S14, State.U14, '[$checkin=#ONT(ontbadactivities)]')
df.add_user_transition(State.S14, State.U15, '[$checkin=#ONT(ontwasteoftime)]')
df.add_user_transition(State.S14, State.U18, '[$checkin=#ONT(ontnegate)]')
df.set_error_successor(State.S14, State.U19)

# States U15
df.add_system_transition(State.U13, State.EXIT,'"That\'s a great way to spend your time! If you keep doing that, I think you\'ll be okay once this all passes. I would also suggest setting routines to instill normality."') #cognitive distortion
df.add_system_transition(State.U14, State.S18, '[!"Do you think"$checkin"can be part of a healthy life?"]')
df.set_error_successor(State.S18, State.U15)
df.add_system_transition(State.U15, State.change, '"At least you\'re enjoying yourself. Do you think you would want to change this habit?"') #cognitive distortion
df.add_system_transition(State.U19, State.EXIT, '"Thanks for talking to me today! Hope we can talk again sometime."') #cognitive distortion
df.add_user_transition(State.change, State.want_change, '[#ONT(ontaffirm)]')
df.set_error_successor(State.change, State.ENDwGREET)
##S17 Therapy Section
##States used: U30, U31, S30
df.add_system_transition(State.U30, State.EXIT, '"Great to hear that and I think it\'s time to conclude our session. Thanks for talking to me today!"') #cognitive distortion
# df.add_system_transition(State.U30, State.EXIT, '"Great to hear that and I think it\'s time to conclude our session. Thanks for talking to me today! Hope we can talk again sometime."')

# S18 Therapy section
df.add_user_transition(State.S18, State.U15, '[$affirm_healthy=#ONT(ontaffirm)]')
df.add_user_transition(State.S18, State.filtering, '[$negate_healthy=#ONT(ontnegate)]')
df.set_error_successor(State.S18, State.U15)

#Cognitive Distortions
dont_know = '[{' \
            'dont know,do not know,unsure,[not,{sure,certain}],hard to say,no idea,uncertain,[!no {opinion,opinions,idea,ideas,thought,thoughts,knowledge}],' \
            '[{dont,do not}, have, {opinion,opinions,idea,ideas,thought,thoughts,knowledge}],' \
            '[!{cant,cannot,dont} {think,remember,recall}]' \
            '}]'
df.add_system_transition(State.distortion_intro, State.distortion, '"Let\'s try to work through some of the problems you are facing."')
df.add_user_transition(State.distortion, State.filtering, '[#ONT(ontaffirm)]')
df.set_error_successor(State.distortion, State.Incomprehensible_Exit)
#df.add_user_transition(State.distortion, State.polar_intro, )
df.add_system_transition(State.filtering, State.filtering_ans, '"Do you think you ignore the positive aspects of your life?"')
df.add_user_transition(State.filtering_ans, State.filtering_yes, '[$affirm_filtering=#ONT(ontaffirm)]')
df.add_user_transition(State.filtering_ans, State.filtering_no, '[$negate_filtering=#ONT(ontnegate)]')
df.add_user_transition(State.filtering_ans, State.filtering_unsure, dont_know)
df.add_system_transition(State.filtering_yes, State.filtering_treatment, '"I want to recommend some ways for you to cope with the way you are feeling."')
#df.error_successor(State.filtering_treatment, State.journal)
#df.add_system_transition(State.journal, State.first_journal_entry, )
#df.add_system_transition(State.polar_intro, State.polar, '"Why is it stressful?"')
# Change Realization
df.add_system_transition(State.want_change, State.change_response, '[!"This is an excellent first step towards changing your life. You most likely will not be able to cut"$checkin"out of your life entirely. Acknowledgement is the first step. Do you want the next step?"]')
df.add_user_transition(State.change_response, State.change_yes, '[#ONT(ontaffirm)]')
df.add_system_transition(State.change_yes, State.change_focus, '""')
df.set_error_successor(State.change_response, State.ENDwGREET)

# goodbye_statement
# end
# df.set_error_successor(State.EXIT,State.goodbye_statement)
# df.add_system_transition(State.goodbye_statement,State.end,'"Goodbye!"')
# df.add_user_transition(State.end,State.goodbye_statement,'[#ONT(ontaffirm)]')
# df.set_error_successor(State.end,error_successor=State.end)
##above is from old patch, below is from new

# goodbye_statement
# end
df.add_system_transition(State.Incomprehensible_Exit, State.end, '"I\'m sorry I do not understand what you are saying"')
df.set_error_successor(State.EXIT, State.goodbye_statement)
df.add_system_transition(State.goodbye_statement, State.end, '"Goodbye! Talk to you some other time."')
###Angela: above sent me in an infinite loop
df.set_error_successor(State.end, error_successor=State.end)

# hotlinecatch
df.add_user_transition(State.First_negative_prompt, State.P4D, "[$response=#ONT(onthotline)]")
df.add_system_transition(State.P4D, State.U4D1, '"Oh no! I am very afraid that this may be a violent or life-threatening situation. Here are some hotlines: Suicide: 8002738255, Domestic violence: 8007997233, Sexual assault: 8006564673."')
df.add_user_transition(State.U4D1, State.P4D1, "/.*/")
df.add_system_transition(State.P4D1, State.END, '"Goodbye! Thanks for talking to me today!"')

if __name__ == '__main__':
    df.run(debugging=False)
